# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Structure is used to describe the contents of secure data access key within the context of the communication session with electronic document
"""
class RfidAccessKey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_key': 'str',
        'key_type': 'RfidPasswordType',
        'access_type': 'RfidAccessControlProcedureType',
        'check_full_key_matching': 'bool'
    }

    attribute_map = {
        'access_key': 'AccessKey',
        'key_type': 'KeyType',
        'access_type': 'AccessType',
        'check_full_key_matching': 'CheckFullKeyMatching'
    }

    def __init__(self, access_key=None, key_type=None, access_type=None, check_full_key_matching=None, local_vars_configuration=None):  # noqa: E501
        """RfidAccessKey - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_key = None
        self._key_type = None
        self._access_type = None
        self._check_full_key_matching = None
        self.discriminator = None

        self.access_key = access_key
        self.key_type = key_type
        self.access_type = access_type
        self.check_full_key_matching = check_full_key_matching

    @property
    def access_key(self):
        """Gets the access_key of this RfidAccessKey.  # noqa: E501

        Key contents  # noqa: E501

        :return: The access_key of this RfidAccessKey.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this RfidAccessKey.

        Key contents  # noqa: E501

        :param access_key: The access_key of this RfidAccessKey.  # noqa: E501
        :type access_key: str
        """
        if self.local_vars_configuration.client_side_validation and access_key is None:  # noqa: E501
            raise ValueError("Invalid value for `access_key`, must not be `None`")  # noqa: E501

        self._access_key = access_key

    @property
    def key_type(self):
        """Gets the key_type of this RfidAccessKey.  # noqa: E501


        :return: The key_type of this RfidAccessKey.  # noqa: E501
        :rtype: RfidPasswordType
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this RfidAccessKey.


        :param key_type: The key_type of this RfidAccessKey.  # noqa: E501
        :type key_type: RfidPasswordType
        """
        if self.local_vars_configuration.client_side_validation and key_type is None:  # noqa: E501
            raise ValueError("Invalid value for `key_type`, must not be `None`")  # noqa: E501

        self._key_type = key_type

    @property
    def access_type(self):
        """Gets the access_type of this RfidAccessKey.  # noqa: E501


        :return: The access_type of this RfidAccessKey.  # noqa: E501
        :rtype: RfidAccessControlProcedureType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this RfidAccessKey.


        :param access_type: The access_type of this RfidAccessKey.  # noqa: E501
        :type access_type: RfidAccessControlProcedureType
        """
        if self.local_vars_configuration.client_side_validation and access_type is None:  # noqa: E501
            raise ValueError("Invalid value for `access_type`, must not be `None`")  # noqa: E501

        self._access_type = access_type

    @property
    def check_full_key_matching(self):
        """Gets the check_full_key_matching of this RfidAccessKey.  # noqa: E501

        Logical sign of the need for a full comparison of AccessKey contents with the contents of DG1 (MRZ) data group  # noqa: E501

        :return: The check_full_key_matching of this RfidAccessKey.  # noqa: E501
        :rtype: bool
        """
        return self._check_full_key_matching

    @check_full_key_matching.setter
    def check_full_key_matching(self, check_full_key_matching):
        """Sets the check_full_key_matching of this RfidAccessKey.

        Logical sign of the need for a full comparison of AccessKey contents with the contents of DG1 (MRZ) data group  # noqa: E501

        :param check_full_key_matching: The check_full_key_matching of this RfidAccessKey.  # noqa: E501
        :type check_full_key_matching: bool
        """
        if self.local_vars_configuration.client_side_validation and check_full_key_matching is None:  # noqa: E501
            raise ValueError("Invalid value for `check_full_key_matching`, must not be `None`")  # noqa: E501

        self._check_full_key_matching = check_full_key_matching

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidAccessKey):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidAccessKey):
            return True

        return self.to_dict() != other.to_dict()
