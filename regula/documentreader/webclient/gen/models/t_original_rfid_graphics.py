# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""

"""
class TOriginalRFIDGraphics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'field_type': 'int',
        'graphics_type': 'int',
        'rfid_origin_dg': 'int',
        'rfid_origin_dg_tag': 'int',
        'rfid_origin_tag_entry': 'int',
        'rfid_origin_entry_view': 'int',
        'buf_length': 'int',
        'buffer': 'str'
    }

    attribute_map = {
        'field_type': 'FieldType',
        'graphics_type': 'GraphicsType',
        'rfid_origin_dg': 'RFID_OriginDG',
        'rfid_origin_dg_tag': 'RFID_OriginDGTag',
        'rfid_origin_tag_entry': 'RFID_OriginTagEntry',
        'rfid_origin_entry_view': 'RFID_OriginEntryView',
        'buf_length': 'Buf_Length',
        'buffer': 'Buffer'
    }

    def __init__(self, field_type=None, graphics_type=None, rfid_origin_dg=None, rfid_origin_dg_tag=None, rfid_origin_tag_entry=None, rfid_origin_entry_view=None, buf_length=None, buffer=None, local_vars_configuration=None):  # noqa: E501
        """TOriginalRFIDGraphics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._field_type = None
        self._graphics_type = None
        self._rfid_origin_dg = None
        self._rfid_origin_dg_tag = None
        self._rfid_origin_tag_entry = None
        self._rfid_origin_entry_view = None
        self._buf_length = None
        self._buffer = None
        self.discriminator = None

        if field_type is not None:
            self.field_type = field_type
        if graphics_type is not None:
            self.graphics_type = graphics_type
        if rfid_origin_dg is not None:
            self.rfid_origin_dg = rfid_origin_dg
        if rfid_origin_dg_tag is not None:
            self.rfid_origin_dg_tag = rfid_origin_dg_tag
        if rfid_origin_tag_entry is not None:
            self.rfid_origin_tag_entry = rfid_origin_tag_entry
        if rfid_origin_entry_view is not None:
            self.rfid_origin_entry_view = rfid_origin_entry_view
        if buf_length is not None:
            self.buf_length = buf_length
        if buffer is not None:
            self.buffer = buffer

    @property
    def field_type(self):
        """Gets the field_type of this TOriginalRFIDGraphics.  # noqa: E501


        :return: The field_type of this TOriginalRFIDGraphics.  # noqa: E501
        :rtype: int
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this TOriginalRFIDGraphics.


        :param field_type: The field_type of this TOriginalRFIDGraphics.  # noqa: E501
        :type field_type: int
        """

        self._field_type = field_type

    @property
    def graphics_type(self):
        """Gets the graphics_type of this TOriginalRFIDGraphics.  # noqa: E501


        :return: The graphics_type of this TOriginalRFIDGraphics.  # noqa: E501
        :rtype: int
        """
        return self._graphics_type

    @graphics_type.setter
    def graphics_type(self, graphics_type):
        """Sets the graphics_type of this TOriginalRFIDGraphics.


        :param graphics_type: The graphics_type of this TOriginalRFIDGraphics.  # noqa: E501
        :type graphics_type: int
        """

        self._graphics_type = graphics_type

    @property
    def rfid_origin_dg(self):
        """Gets the rfid_origin_dg of this TOriginalRFIDGraphics.  # noqa: E501


        :return: The rfid_origin_dg of this TOriginalRFIDGraphics.  # noqa: E501
        :rtype: int
        """
        return self._rfid_origin_dg

    @rfid_origin_dg.setter
    def rfid_origin_dg(self, rfid_origin_dg):
        """Sets the rfid_origin_dg of this TOriginalRFIDGraphics.


        :param rfid_origin_dg: The rfid_origin_dg of this TOriginalRFIDGraphics.  # noqa: E501
        :type rfid_origin_dg: int
        """

        self._rfid_origin_dg = rfid_origin_dg

    @property
    def rfid_origin_dg_tag(self):
        """Gets the rfid_origin_dg_tag of this TOriginalRFIDGraphics.  # noqa: E501


        :return: The rfid_origin_dg_tag of this TOriginalRFIDGraphics.  # noqa: E501
        :rtype: int
        """
        return self._rfid_origin_dg_tag

    @rfid_origin_dg_tag.setter
    def rfid_origin_dg_tag(self, rfid_origin_dg_tag):
        """Sets the rfid_origin_dg_tag of this TOriginalRFIDGraphics.


        :param rfid_origin_dg_tag: The rfid_origin_dg_tag of this TOriginalRFIDGraphics.  # noqa: E501
        :type rfid_origin_dg_tag: int
        """

        self._rfid_origin_dg_tag = rfid_origin_dg_tag

    @property
    def rfid_origin_tag_entry(self):
        """Gets the rfid_origin_tag_entry of this TOriginalRFIDGraphics.  # noqa: E501


        :return: The rfid_origin_tag_entry of this TOriginalRFIDGraphics.  # noqa: E501
        :rtype: int
        """
        return self._rfid_origin_tag_entry

    @rfid_origin_tag_entry.setter
    def rfid_origin_tag_entry(self, rfid_origin_tag_entry):
        """Sets the rfid_origin_tag_entry of this TOriginalRFIDGraphics.


        :param rfid_origin_tag_entry: The rfid_origin_tag_entry of this TOriginalRFIDGraphics.  # noqa: E501
        :type rfid_origin_tag_entry: int
        """

        self._rfid_origin_tag_entry = rfid_origin_tag_entry

    @property
    def rfid_origin_entry_view(self):
        """Gets the rfid_origin_entry_view of this TOriginalRFIDGraphics.  # noqa: E501


        :return: The rfid_origin_entry_view of this TOriginalRFIDGraphics.  # noqa: E501
        :rtype: int
        """
        return self._rfid_origin_entry_view

    @rfid_origin_entry_view.setter
    def rfid_origin_entry_view(self, rfid_origin_entry_view):
        """Sets the rfid_origin_entry_view of this TOriginalRFIDGraphics.


        :param rfid_origin_entry_view: The rfid_origin_entry_view of this TOriginalRFIDGraphics.  # noqa: E501
        :type rfid_origin_entry_view: int
        """

        self._rfid_origin_entry_view = rfid_origin_entry_view

    @property
    def buf_length(self):
        """Gets the buf_length of this TOriginalRFIDGraphics.  # noqa: E501


        :return: The buf_length of this TOriginalRFIDGraphics.  # noqa: E501
        :rtype: int
        """
        return self._buf_length

    @buf_length.setter
    def buf_length(self, buf_length):
        """Sets the buf_length of this TOriginalRFIDGraphics.


        :param buf_length: The buf_length of this TOriginalRFIDGraphics.  # noqa: E501
        :type buf_length: int
        """

        self._buf_length = buf_length

    @property
    def buffer(self):
        """Gets the buffer of this TOriginalRFIDGraphics.  # noqa: E501


        :return: The buffer of this TOriginalRFIDGraphics.  # noqa: E501
        :rtype: str
        """
        return self._buffer

    @buffer.setter
    def buffer(self, buffer):
        """Sets the buffer of this TOriginalRFIDGraphics.


        :param buffer: The buffer of this TOriginalRFIDGraphics.  # noqa: E501
        :type buffer: str
        """

        self._buffer = buffer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TOriginalRFIDGraphics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TOriginalRFIDGraphics):
            return True

        return self.to_dict() != other.to_dict()
