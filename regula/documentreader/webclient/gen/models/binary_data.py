# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from regula.documentreader.webclient.gen.models.details_rfid import DetailsRFID
from regula.documentreader.webclient.gen.models.rfid_data_file_type import RfidDataFileType
from regula.documentreader.webclient.gen.models.rfid_dg1 import RfidDG1
from regula.documentreader.webclient.gen.models.rfid_session_data import RfidSessionData
from typing import Optional, Set
from typing_extensions import Self
from pydantic import SkipValidation, Field

class BinaryData(BaseModel):
    """
    Structure is used for storing the results of one bar-code module reading.
    """ # noqa: E501
    rfid_authentication_info: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_Authentication_Info", default=None)
    rfid_mifare_data_validity: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_MIFARE_Data_Validity", default=None)
    rfid_mifare_data: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_MIFARE_Data", default=None)
    rfid_ef_com: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_EF_COM", default=None)
    rfid_dg1: SkipValidation[Optional[RfidDG1]] = Field(alias="RFID_DG1", default=None)
    rfid_dg2: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG2", default=None)
    rfid_dg3: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG3", default=None)
    rfid_dg4: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG4", default=None)
    rfid_dg5: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG5", default=None)
    rfid_dg6: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG6", default=None)
    rfid_dg7: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG7", default=None)
    rfid_dg8: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG8", default=None)
    rfid_dg9: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG9", default=None)
    rfid_dg10: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG10", default=None)
    rfid_dg11: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG11", default=None)
    rfid_dg12: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG12", default=None)
    rfid_dg13: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG13", default=None)
    rfid_dg14: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG14", default=None)
    rfid_dg15: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG15", default=None)
    rfid_dg16: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_DG16", default=None)
    rfid_ef_sod: SkipValidation[Optional[Dict[str, object]]] = Field(alias="RFID_EF_SOD", default=None)
    e_id_dg1: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG1", default=None)
    e_id_dg2: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG2", default=None)
    e_id_dg3: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG3", default=None)
    e_id_dg4: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG4", default=None)
    e_id_dg5: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG5", default=None)
    e_id_dg6: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG6", default=None)
    e_id_dg7: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG7", default=None)
    e_id_dg8: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG8", default=None)
    e_id_dg9: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG9", default=None)
    e_id_dg10: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG10", default=None)
    e_id_dg11: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG11", default=None)
    e_id_dg12: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG12", default=None)
    e_id_dg13: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG13", default=None)
    e_id_dg14: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG14", default=None)
    e_id_dg15: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG15", default=None)
    e_id_dg16: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG16", default=None)
    e_id_dg17: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG17", default=None)
    e_id_dg18: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG18", default=None)
    e_id_dg19: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG19", default=None)
    e_id_dg20: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG20", default=None)
    e_id_dg21: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eID_DG21", default=None)
    e_dl_com: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_COM", default=None)
    e_dl_sod: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_SOD", default=None)
    e_dl_dg1: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG1", default=None)
    e_dl_dg2: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG2", default=None)
    e_dl_dg3: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG3", default=None)
    e_dl_dg4: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG4", default=None)
    e_dl_dg5: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG5", default=None)
    e_dl_dg6: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG6", default=None)
    e_dl_dg7: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG7", default=None)
    e_dl_dg8: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG8", default=None)
    e_dl_dg9: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG9", default=None)
    e_dl_dg10: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG10", default=None)
    e_dl_dg11: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG11", default=None)
    e_dl_dg12: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG12", default=None)
    e_dl_dg13: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG13", default=None)
    e_dl_dg14: SkipValidation[Optional[Dict[str, object]]] = Field(alias="eDL_DG14", default=None)
    visible_digital_seal: SkipValidation[Optional[Dict[str, object]]] = Field(alias="Visible_Digital_Seal", default=None)
    visible_digital_seal_nc: SkipValidation[Optional[Dict[str, object]]] = Field(alias="Visible_Digital_Seal_NC", default=None)
    digital_signature: SkipValidation[Optional[Dict[str, object]]] = Field(alias="Digital_Signature", default=None)
    rfid_session_data: SkipValidation[Optional[RfidSessionData]] = Field(alias="RFID_Session_Data", default=None)
    rfid_session_data_status: SkipValidation[Optional[DetailsRFID]] = Field(alias="RFID_Session_Data_Status", default=None)
    rfid_e_passp_directory: SkipValidation[Optional[List[RfidDataFileType]]] = Field(alias="RFID_ePassp_Directory", default=None, description="Indexes of groups that aren&#39;t read")
    __properties: ClassVar[List[str]] = ["RFID_Authentication_Info", "RFID_MIFARE_Data_Validity", "RFID_MIFARE_Data", "RFID_EF_COM", "RFID_DG1", "RFID_DG2", "RFID_DG3", "RFID_DG4", "RFID_DG5", "RFID_DG6", "RFID_DG7", "RFID_DG8", "RFID_DG9", "RFID_DG10", "RFID_DG11", "RFID_DG12", "RFID_DG13", "RFID_DG14", "RFID_DG15", "RFID_DG16", "RFID_EF_SOD", "eID_DG1", "eID_DG2", "eID_DG3", "eID_DG4", "eID_DG5", "eID_DG6", "eID_DG7", "eID_DG8", "eID_DG9", "eID_DG10", "eID_DG11", "eID_DG12", "eID_DG13", "eID_DG14", "eID_DG15", "eID_DG16", "eID_DG17", "eID_DG18", "eID_DG19", "eID_DG20", "eID_DG21", "eDL_COM", "eDL_SOD", "eDL_DG1", "eDL_DG2", "eDL_DG3", "eDL_DG4", "eDL_DG5", "eDL_DG6", "eDL_DG7", "eDL_DG8", "eDL_DG9", "eDL_DG10", "eDL_DG11", "eDL_DG12", "eDL_DG13", "eDL_DG14", "Visible_Digital_Seal", "Visible_Digital_Seal_NC", "Digital_Signature", "RFID_Session_Data", "RFID_Session_Data_Status", "RFID_ePassp_Directory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        arbitrary_types_allowed=True,
        use_enum_values=True
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BinaryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rfid_dg1
        if self.rfid_dg1:
            _dict['RFID_DG1'] = self.rfid_dg1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rfid_session_data
        if self.rfid_session_data:
            _dict['RFID_Session_Data'] = self.rfid_session_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rfid_session_data_status
        if self.rfid_session_data_status:
            _dict['RFID_Session_Data_Status'] = self.rfid_session_data_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BinaryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "RFID_Authentication_Info": obj.get("RFID_Authentication_Info"),
            "RFID_MIFARE_Data_Validity": obj.get("RFID_MIFARE_Data_Validity"),
            "RFID_MIFARE_Data": obj.get("RFID_MIFARE_Data"),
            "RFID_EF_COM": obj.get("RFID_EF_COM"),
            "RFID_DG1": RfidDG1.from_dict(obj["RFID_DG1"]) if obj.get("RFID_DG1") is not None else None,
            "RFID_DG2": obj.get("RFID_DG2"),
            "RFID_DG3": obj.get("RFID_DG3"),
            "RFID_DG4": obj.get("RFID_DG4"),
            "RFID_DG5": obj.get("RFID_DG5"),
            "RFID_DG6": obj.get("RFID_DG6"),
            "RFID_DG7": obj.get("RFID_DG7"),
            "RFID_DG8": obj.get("RFID_DG8"),
            "RFID_DG9": obj.get("RFID_DG9"),
            "RFID_DG10": obj.get("RFID_DG10"),
            "RFID_DG11": obj.get("RFID_DG11"),
            "RFID_DG12": obj.get("RFID_DG12"),
            "RFID_DG13": obj.get("RFID_DG13"),
            "RFID_DG14": obj.get("RFID_DG14"),
            "RFID_DG15": obj.get("RFID_DG15"),
            "RFID_DG16": obj.get("RFID_DG16"),
            "RFID_EF_SOD": obj.get("RFID_EF_SOD"),
            "eID_DG1": obj.get("eID_DG1"),
            "eID_DG2": obj.get("eID_DG2"),
            "eID_DG3": obj.get("eID_DG3"),
            "eID_DG4": obj.get("eID_DG4"),
            "eID_DG5": obj.get("eID_DG5"),
            "eID_DG6": obj.get("eID_DG6"),
            "eID_DG7": obj.get("eID_DG7"),
            "eID_DG8": obj.get("eID_DG8"),
            "eID_DG9": obj.get("eID_DG9"),
            "eID_DG10": obj.get("eID_DG10"),
            "eID_DG11": obj.get("eID_DG11"),
            "eID_DG12": obj.get("eID_DG12"),
            "eID_DG13": obj.get("eID_DG13"),
            "eID_DG14": obj.get("eID_DG14"),
            "eID_DG15": obj.get("eID_DG15"),
            "eID_DG16": obj.get("eID_DG16"),
            "eID_DG17": obj.get("eID_DG17"),
            "eID_DG18": obj.get("eID_DG18"),
            "eID_DG19": obj.get("eID_DG19"),
            "eID_DG20": obj.get("eID_DG20"),
            "eID_DG21": obj.get("eID_DG21"),
            "eDL_COM": obj.get("eDL_COM"),
            "eDL_SOD": obj.get("eDL_SOD"),
            "eDL_DG1": obj.get("eDL_DG1"),
            "eDL_DG2": obj.get("eDL_DG2"),
            "eDL_DG3": obj.get("eDL_DG3"),
            "eDL_DG4": obj.get("eDL_DG4"),
            "eDL_DG5": obj.get("eDL_DG5"),
            "eDL_DG6": obj.get("eDL_DG6"),
            "eDL_DG7": obj.get("eDL_DG7"),
            "eDL_DG8": obj.get("eDL_DG8"),
            "eDL_DG9": obj.get("eDL_DG9"),
            "eDL_DG10": obj.get("eDL_DG10"),
            "eDL_DG11": obj.get("eDL_DG11"),
            "eDL_DG12": obj.get("eDL_DG12"),
            "eDL_DG13": obj.get("eDL_DG13"),
            "eDL_DG14": obj.get("eDL_DG14"),
            "Visible_Digital_Seal": obj.get("Visible_Digital_Seal"),
            "Visible_Digital_Seal_NC": obj.get("Visible_Digital_Seal_NC"),
            "Digital_Signature": obj.get("Digital_Signature"),
            "RFID_Session_Data": RfidSessionData.from_dict(obj["RFID_Session_Data"]) if obj.get("RFID_Session_Data") is not None else None,
            "RFID_Session_Data_Status": DetailsRFID.from_dict(obj["RFID_Session_Data_Status"]) if obj.get("RFID_Session_Data_Status") is not None else None,
            "RFID_ePassp_Directory": obj.get("RFID_ePassp_Directory")
        })
        return _obj


