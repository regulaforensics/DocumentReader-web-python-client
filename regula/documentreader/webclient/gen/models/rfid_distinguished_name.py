# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Contents of the identifier in binary form. Base64 encoded.
"""
class RfidDistinguishedName(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data': 'str',
        'friendly_name': 'TrfFtString',
        'attributes': 'list[RfidAttributeName]'
    }

    attribute_map = {
        'data': 'Data',
        'friendly_name': 'FriendlyName',
        'attributes': 'Attributes'
    }

    def __init__(self, data=None, friendly_name=None, attributes=None, local_vars_configuration=None):  # noqa: E501
        """RfidDistinguishedName - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data = None
        self._friendly_name = None
        self._attributes = None
        self.discriminator = None

        self.data = data
        self.friendly_name = friendly_name
        self.attributes = attributes

    @property
    def data(self):
        """Gets the data of this RfidDistinguishedName.  # noqa: E501

        Contents of the identifier in binary form. Base64 encoded.  # noqa: E501

        :return: The data of this RfidDistinguishedName.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RfidDistinguishedName.

        Contents of the identifier in binary form. Base64 encoded.  # noqa: E501

        :param data: The data of this RfidDistinguishedName.  # noqa: E501
        :type data: str
        """
        if self.local_vars_configuration.client_side_validation and data is None:  # noqa: E501
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def friendly_name(self):
        """Gets the friendly_name of this RfidDistinguishedName.  # noqa: E501


        :return: The friendly_name of this RfidDistinguishedName.  # noqa: E501
        :rtype: TrfFtString
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this RfidDistinguishedName.


        :param friendly_name: The friendly_name of this RfidDistinguishedName.  # noqa: E501
        :type friendly_name: TrfFtString
        """
        if self.local_vars_configuration.client_side_validation and friendly_name is None:  # noqa: E501
            raise ValueError("Invalid value for `friendly_name`, must not be `None`")  # noqa: E501

        self._friendly_name = friendly_name

    @property
    def attributes(self):
        """Gets the attributes of this RfidDistinguishedName.  # noqa: E501

        List of individual attributes contained in the identifier  # noqa: E501

        :return: The attributes of this RfidDistinguishedName.  # noqa: E501
        :rtype: list[RfidAttributeName]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this RfidDistinguishedName.

        List of individual attributes contained in the identifier  # noqa: E501

        :param attributes: The attributes of this RfidDistinguishedName.  # noqa: E501
        :type attributes: list[RfidAttributeName]
        """
        if self.local_vars_configuration.client_side_validation and attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidDistinguishedName):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidDistinguishedName):
            return True

        return self.to_dict() != other.to_dict()
