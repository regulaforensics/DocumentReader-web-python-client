# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""

"""
class GlaresCheckParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'img_margin_part': 'float',
        'max_glaring_part': 'float'
    }

    attribute_map = {
        'img_margin_part': 'imgMarginPart',
        'max_glaring_part': 'maxGlaringPart'
    }

    def __init__(self, img_margin_part=None, max_glaring_part=None, local_vars_configuration=None):  # noqa: E501
        """GlaresCheckParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._img_margin_part = None
        self._max_glaring_part = None
        self.discriminator = None

        if img_margin_part is not None:
            self.img_margin_part = img_margin_part
        if max_glaring_part is not None:
            self.max_glaring_part = max_glaring_part

    @property
    def img_margin_part(self):
        """Gets the img_margin_part of this GlaresCheckParams.  # noqa: E501

        Margin from the edges of the image. 0.35 = 35%  # noqa: E501

        :return: The img_margin_part of this GlaresCheckParams.  # noqa: E501
        :rtype: float
        """
        return self._img_margin_part

    @img_margin_part.setter
    def img_margin_part(self, img_margin_part):
        """Sets the img_margin_part of this GlaresCheckParams.

        Margin from the edges of the image. 0.35 = 35%  # noqa: E501

        :param img_margin_part: The img_margin_part of this GlaresCheckParams.  # noqa: E501
        :type img_margin_part: float
        """

        self._img_margin_part = img_margin_part

    @property
    def max_glaring_part(self):
        """Gets the max_glaring_part of this GlaresCheckParams.  # noqa: E501

        The maximum allowable part of the area occupied by the glare. The same: 0.06 = 6%  # noqa: E501

        :return: The max_glaring_part of this GlaresCheckParams.  # noqa: E501
        :rtype: float
        """
        return self._max_glaring_part

    @max_glaring_part.setter
    def max_glaring_part(self, max_glaring_part):
        """Sets the max_glaring_part of this GlaresCheckParams.

        The maximum allowable part of the area occupied by the glare. The same: 0.06 = 6%  # noqa: E501

        :param max_glaring_part: The max_glaring_part of this GlaresCheckParams.  # noqa: E501
        :type max_glaring_part: float
        """

        self._max_glaring_part = max_glaring_part

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlaresCheckParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GlaresCheckParams):
            return True

        return self.to_dict() != other.to_dict()
