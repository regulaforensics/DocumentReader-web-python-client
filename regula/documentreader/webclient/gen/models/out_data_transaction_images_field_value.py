# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""

"""
class OutDataTransactionImagesFieldValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'field_type': 'GraphicFieldType',
        'light': 'Light',
        'list_idx': 'int',
        'page_idx': 'int',
        'url': 'str'
    }

    attribute_map = {
        'field_type': 'fieldType',
        'light': 'light',
        'list_idx': 'listIdx',
        'page_idx': 'pageIdx',
        'url': 'url'
    }

    def __init__(self, field_type=None, light=None, list_idx=None, page_idx=None, url=None, local_vars_configuration=None):  # noqa: E501
        """OutDataTransactionImagesFieldValue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._field_type = None
        self._light = None
        self._list_idx = None
        self._page_idx = None
        self._url = None
        self.discriminator = None

        if field_type is not None:
            self.field_type = field_type
        if light is not None:
            self.light = light
        if list_idx is not None:
            self.list_idx = list_idx
        if page_idx is not None:
            self.page_idx = page_idx
        if url is not None:
            self.url = url

    @property
    def field_type(self):
        """Gets the field_type of this OutDataTransactionImagesFieldValue.  # noqa: E501


        :return: The field_type of this OutDataTransactionImagesFieldValue.  # noqa: E501
        :rtype: GraphicFieldType
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this OutDataTransactionImagesFieldValue.


        :param field_type: The field_type of this OutDataTransactionImagesFieldValue.  # noqa: E501
        :type field_type: GraphicFieldType
        """

        self._field_type = field_type

    @property
    def light(self):
        """Gets the light of this OutDataTransactionImagesFieldValue.  # noqa: E501


        :return: The light of this OutDataTransactionImagesFieldValue.  # noqa: E501
        :rtype: Light
        """
        return self._light

    @light.setter
    def light(self, light):
        """Sets the light of this OutDataTransactionImagesFieldValue.


        :param light: The light of this OutDataTransactionImagesFieldValue.  # noqa: E501
        :type light: Light
        """

        self._light = light

    @property
    def list_idx(self):
        """Gets the list_idx of this OutDataTransactionImagesFieldValue.  # noqa: E501


        :return: The list_idx of this OutDataTransactionImagesFieldValue.  # noqa: E501
        :rtype: int
        """
        return self._list_idx

    @list_idx.setter
    def list_idx(self, list_idx):
        """Sets the list_idx of this OutDataTransactionImagesFieldValue.


        :param list_idx: The list_idx of this OutDataTransactionImagesFieldValue.  # noqa: E501
        :type list_idx: int
        """

        self._list_idx = list_idx

    @property
    def page_idx(self):
        """Gets the page_idx of this OutDataTransactionImagesFieldValue.  # noqa: E501

        Page index of the image from input list  # noqa: E501

        :return: The page_idx of this OutDataTransactionImagesFieldValue.  # noqa: E501
        :rtype: int
        """
        return self._page_idx

    @page_idx.setter
    def page_idx(self, page_idx):
        """Sets the page_idx of this OutDataTransactionImagesFieldValue.

        Page index of the image from input list  # noqa: E501

        :param page_idx: The page_idx of this OutDataTransactionImagesFieldValue.  # noqa: E501
        :type page_idx: int
        """

        self._page_idx = page_idx

    @property
    def url(self):
        """Gets the url of this OutDataTransactionImagesFieldValue.  # noqa: E501

        Image url  # noqa: E501

        :return: The url of this OutDataTransactionImagesFieldValue.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OutDataTransactionImagesFieldValue.

        Image url  # noqa: E501

        :param url: The url of this OutDataTransactionImagesFieldValue.  # noqa: E501
        :type url: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutDataTransactionImagesFieldValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutDataTransactionImagesFieldValue):
            return True

        return self.to_dict() != other.to_dict()
