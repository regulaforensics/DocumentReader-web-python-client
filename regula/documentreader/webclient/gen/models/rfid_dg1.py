# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Structure used to store the contents of EF.DG1 informational data group of ePassport application – document MRZ data
"""
class RfidDG1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'RfidDataGroupTypeTag',
        'document_id': 'DocumentFormat',
        'document_type': 'str',
        'state': 'str',
        'holder': 'str',
        'document_number': 'str',
        'check_digit_document_number': 'float',
        'nationality': 'str',
        'birthday': 'str',
        'check_digit_birthday': 'float',
        'sex': 'str',
        'expiry_date': 'str',
        'check_digit_expiry_date': 'float',
        'optional_data': 'str',
        'check_digit_optional_data': 'float',
        'check_digit_composite': 'float'
    }

    attribute_map = {
        'type': 'Type',
        'document_id': 'DocumentID',
        'document_type': 'DocumentType',
        'state': 'State',
        'holder': 'Holder',
        'document_number': 'DocumentNumber',
        'check_digit_document_number': 'CheckDigitDocumentNumber',
        'nationality': 'Nationality',
        'birthday': 'Birthday',
        'check_digit_birthday': 'CheckDigitBirthday',
        'sex': 'Sex',
        'expiry_date': 'ExpiryDate',
        'check_digit_expiry_date': 'CheckDigitExpiryDate',
        'optional_data': 'OptionalData',
        'check_digit_optional_data': 'CheckDigitOptionalData',
        'check_digit_composite': 'CheckDigitComposite'
    }

    def __init__(self, type=None, document_id=None, document_type=None, state=None, holder=None, document_number=None, check_digit_document_number=None, nationality=None, birthday=None, check_digit_birthday=None, sex=None, expiry_date=None, check_digit_expiry_date=None, optional_data=None, check_digit_optional_data=None, check_digit_composite=None, local_vars_configuration=None):  # noqa: E501
        """RfidDG1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._document_id = None
        self._document_type = None
        self._state = None
        self._holder = None
        self._document_number = None
        self._check_digit_document_number = None
        self._nationality = None
        self._birthday = None
        self._check_digit_birthday = None
        self._sex = None
        self._expiry_date = None
        self._check_digit_expiry_date = None
        self._optional_data = None
        self._check_digit_optional_data = None
        self._check_digit_composite = None
        self.discriminator = None

        self.type = type
        self.document_id = document_id
        self.document_type = document_type
        self.state = state
        self.holder = holder
        self.document_number = document_number
        self.check_digit_document_number = check_digit_document_number
        self.nationality = nationality
        self.birthday = birthday
        self.check_digit_birthday = check_digit_birthday
        self.sex = sex
        self.expiry_date = expiry_date
        self.check_digit_expiry_date = check_digit_expiry_date
        self.optional_data = optional_data
        self.check_digit_optional_data = check_digit_optional_data
        self.check_digit_composite = check_digit_composite

    @property
    def type(self):
        """Gets the type of this RfidDG1.  # noqa: E501


        :return: The type of this RfidDG1.  # noqa: E501
        :rtype: RfidDataGroupTypeTag
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RfidDG1.


        :param type: The type of this RfidDG1.  # noqa: E501
        :type type: RfidDataGroupTypeTag
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def document_id(self):
        """Gets the document_id of this RfidDG1.  # noqa: E501


        :return: The document_id of this RfidDG1.  # noqa: E501
        :rtype: DocumentFormat
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this RfidDG1.


        :param document_id: The document_id of this RfidDG1.  # noqa: E501
        :type document_id: DocumentFormat
        """
        if self.local_vars_configuration.client_side_validation and document_id is None:  # noqa: E501
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def document_type(self):
        """Gets the document_type of this RfidDG1.  # noqa: E501

        Symbolic code of document type  # noqa: E501

        :return: The document_type of this RfidDG1.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this RfidDG1.

        Symbolic code of document type  # noqa: E501

        :param document_type: The document_type of this RfidDG1.  # noqa: E501
        :type document_type: str
        """
        if self.local_vars_configuration.client_side_validation and document_type is None:  # noqa: E501
            raise ValueError("Invalid value for `document_type`, must not be `None`")  # noqa: E501

        self._document_type = document_type

    @property
    def state(self):
        """Gets the state of this RfidDG1.  # noqa: E501

        Symbolic code of document issuing state  # noqa: E501

        :return: The state of this RfidDG1.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RfidDG1.

        Symbolic code of document issuing state  # noqa: E501

        :param state: The state of this RfidDG1.  # noqa: E501
        :type state: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def holder(self):
        """Gets the holder of this RfidDG1.  # noqa: E501

        DO’s name and surname  # noqa: E501

        :return: The holder of this RfidDG1.  # noqa: E501
        :rtype: str
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this RfidDG1.

        DO’s name and surname  # noqa: E501

        :param holder: The holder of this RfidDG1.  # noqa: E501
        :type holder: str
        """
        if self.local_vars_configuration.client_side_validation and holder is None:  # noqa: E501
            raise ValueError("Invalid value for `holder`, must not be `None`")  # noqa: E501

        self._holder = holder

    @property
    def document_number(self):
        """Gets the document_number of this RfidDG1.  # noqa: E501

        Document number  # noqa: E501

        :return: The document_number of this RfidDG1.  # noqa: E501
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this RfidDG1.

        Document number  # noqa: E501

        :param document_number: The document_number of this RfidDG1.  # noqa: E501
        :type document_number: str
        """
        if self.local_vars_configuration.client_side_validation and document_number is None:  # noqa: E501
            raise ValueError("Invalid value for `document_number`, must not be `None`")  # noqa: E501

        self._document_number = document_number

    @property
    def check_digit_document_number(self):
        """Gets the check_digit_document_number of this RfidDG1.  # noqa: E501

        Check digit of document number  # noqa: E501

        :return: The check_digit_document_number of this RfidDG1.  # noqa: E501
        :rtype: float
        """
        return self._check_digit_document_number

    @check_digit_document_number.setter
    def check_digit_document_number(self, check_digit_document_number):
        """Sets the check_digit_document_number of this RfidDG1.

        Check digit of document number  # noqa: E501

        :param check_digit_document_number: The check_digit_document_number of this RfidDG1.  # noqa: E501
        :type check_digit_document_number: float
        """
        if self.local_vars_configuration.client_side_validation and check_digit_document_number is None:  # noqa: E501
            raise ValueError("Invalid value for `check_digit_document_number`, must not be `None`")  # noqa: E501

        self._check_digit_document_number = check_digit_document_number

    @property
    def nationality(self):
        """Gets the nationality of this RfidDG1.  # noqa: E501

        Symbolic code of DO’s nationality  # noqa: E501

        :return: The nationality of this RfidDG1.  # noqa: E501
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this RfidDG1.

        Symbolic code of DO’s nationality  # noqa: E501

        :param nationality: The nationality of this RfidDG1.  # noqa: E501
        :type nationality: str
        """
        if self.local_vars_configuration.client_side_validation and nationality is None:  # noqa: E501
            raise ValueError("Invalid value for `nationality`, must not be `None`")  # noqa: E501

        self._nationality = nationality

    @property
    def birthday(self):
        """Gets the birthday of this RfidDG1.  # noqa: E501

        DO’s date of birth  # noqa: E501

        :return: The birthday of this RfidDG1.  # noqa: E501
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this RfidDG1.

        DO’s date of birth  # noqa: E501

        :param birthday: The birthday of this RfidDG1.  # noqa: E501
        :type birthday: str
        """
        if self.local_vars_configuration.client_side_validation and birthday is None:  # noqa: E501
            raise ValueError("Invalid value for `birthday`, must not be `None`")  # noqa: E501

        self._birthday = birthday

    @property
    def check_digit_birthday(self):
        """Gets the check_digit_birthday of this RfidDG1.  # noqa: E501

        Check digit of DO’s date of birth  # noqa: E501

        :return: The check_digit_birthday of this RfidDG1.  # noqa: E501
        :rtype: float
        """
        return self._check_digit_birthday

    @check_digit_birthday.setter
    def check_digit_birthday(self, check_digit_birthday):
        """Sets the check_digit_birthday of this RfidDG1.

        Check digit of DO’s date of birth  # noqa: E501

        :param check_digit_birthday: The check_digit_birthday of this RfidDG1.  # noqa: E501
        :type check_digit_birthday: float
        """
        if self.local_vars_configuration.client_side_validation and check_digit_birthday is None:  # noqa: E501
            raise ValueError("Invalid value for `check_digit_birthday`, must not be `None`")  # noqa: E501

        self._check_digit_birthday = check_digit_birthday

    @property
    def sex(self):
        """Gets the sex of this RfidDG1.  # noqa: E501

        DO’s sex  # noqa: E501

        :return: The sex of this RfidDG1.  # noqa: E501
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this RfidDG1.

        DO’s sex  # noqa: E501

        :param sex: The sex of this RfidDG1.  # noqa: E501
        :type sex: str
        """
        if self.local_vars_configuration.client_side_validation and sex is None:  # noqa: E501
            raise ValueError("Invalid value for `sex`, must not be `None`")  # noqa: E501

        self._sex = sex

    @property
    def expiry_date(self):
        """Gets the expiry_date of this RfidDG1.  # noqa: E501

        Term of validity of the document  # noqa: E501

        :return: The expiry_date of this RfidDG1.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this RfidDG1.

        Term of validity of the document  # noqa: E501

        :param expiry_date: The expiry_date of this RfidDG1.  # noqa: E501
        :type expiry_date: str
        """
        if self.local_vars_configuration.client_side_validation and expiry_date is None:  # noqa: E501
            raise ValueError("Invalid value for `expiry_date`, must not be `None`")  # noqa: E501

        self._expiry_date = expiry_date

    @property
    def check_digit_expiry_date(self):
        """Gets the check_digit_expiry_date of this RfidDG1.  # noqa: E501

        Check digit of term of validity of the document  # noqa: E501

        :return: The check_digit_expiry_date of this RfidDG1.  # noqa: E501
        :rtype: float
        """
        return self._check_digit_expiry_date

    @check_digit_expiry_date.setter
    def check_digit_expiry_date(self, check_digit_expiry_date):
        """Sets the check_digit_expiry_date of this RfidDG1.

        Check digit of term of validity of the document  # noqa: E501

        :param check_digit_expiry_date: The check_digit_expiry_date of this RfidDG1.  # noqa: E501
        :type check_digit_expiry_date: float
        """
        if self.local_vars_configuration.client_side_validation and check_digit_expiry_date is None:  # noqa: E501
            raise ValueError("Invalid value for `check_digit_expiry_date`, must not be `None`")  # noqa: E501

        self._check_digit_expiry_date = check_digit_expiry_date

    @property
    def optional_data(self):
        """Gets the optional_data of this RfidDG1.  # noqa: E501

        DO’s personal number or other additional data  # noqa: E501

        :return: The optional_data of this RfidDG1.  # noqa: E501
        :rtype: str
        """
        return self._optional_data

    @optional_data.setter
    def optional_data(self, optional_data):
        """Sets the optional_data of this RfidDG1.

        DO’s personal number or other additional data  # noqa: E501

        :param optional_data: The optional_data of this RfidDG1.  # noqa: E501
        :type optional_data: str
        """
        if self.local_vars_configuration.client_side_validation and optional_data is None:  # noqa: E501
            raise ValueError("Invalid value for `optional_data`, must not be `None`")  # noqa: E501

        self._optional_data = optional_data

    @property
    def check_digit_optional_data(self):
        """Gets the check_digit_optional_data of this RfidDG1.  # noqa: E501

        Check digit of additional data  # noqa: E501

        :return: The check_digit_optional_data of this RfidDG1.  # noqa: E501
        :rtype: float
        """
        return self._check_digit_optional_data

    @check_digit_optional_data.setter
    def check_digit_optional_data(self, check_digit_optional_data):
        """Sets the check_digit_optional_data of this RfidDG1.

        Check digit of additional data  # noqa: E501

        :param check_digit_optional_data: The check_digit_optional_data of this RfidDG1.  # noqa: E501
        :type check_digit_optional_data: float
        """
        if self.local_vars_configuration.client_side_validation and check_digit_optional_data is None:  # noqa: E501
            raise ValueError("Invalid value for `check_digit_optional_data`, must not be `None`")  # noqa: E501

        self._check_digit_optional_data = check_digit_optional_data

    @property
    def check_digit_composite(self):
        """Gets the check_digit_composite of this RfidDG1.  # noqa: E501

        General check digit  # noqa: E501

        :return: The check_digit_composite of this RfidDG1.  # noqa: E501
        :rtype: float
        """
        return self._check_digit_composite

    @check_digit_composite.setter
    def check_digit_composite(self, check_digit_composite):
        """Sets the check_digit_composite of this RfidDG1.

        General check digit  # noqa: E501

        :param check_digit_composite: The check_digit_composite of this RfidDG1.  # noqa: E501
        :type check_digit_composite: float
        """
        if self.local_vars_configuration.client_side_validation and check_digit_composite is None:  # noqa: E501
            raise ValueError("Invalid value for `check_digit_composite`, must not be `None`")  # noqa: E501

        self._check_digit_composite = check_digit_composite

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidDG1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidDG1):
            return True

        return self.to_dict() != other.to_dict()
