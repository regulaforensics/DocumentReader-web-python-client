# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Structure is used to describe the certificate contents used for the digital signature verification of the document security object within the context of the communication session with electronic document.
"""
class RfidCertificateEx(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'float',
        'serial_number': 'str',
        'signature_algorithm': 'str',
        'issuer': 'RfidDistinguishedName',
        'validity': 'RfidValidity',
        'subject': 'RfidDistinguishedName',
        'subject_pk_algorithm': 'str',
        'extensions': 'list[RfidPkiExtension]',
        'notifications': 'list[ParsingErrorCodes]',
        'origin': 'RfidCertificateOrigin',
        'type': 'RfidCertificateType',
        'file_name': 'TrfFtString',
        'pa_status': 'RFIDErrorCodes'
    }

    attribute_map = {
        'version': 'Version',
        'serial_number': 'SerialNumber',
        'signature_algorithm': 'SignatureAlgorithm',
        'issuer': 'Issuer',
        'validity': 'Validity',
        'subject': 'Subject',
        'subject_pk_algorithm': 'SubjectPKAlgorithm',
        'extensions': 'Extensions',
        'notifications': 'Notifications',
        'origin': 'Origin',
        'type': 'Type',
        'file_name': 'FileName',
        'pa_status': 'PA_Status'
    }

    def __init__(self, version=None, serial_number=None, signature_algorithm=None, issuer=None, validity=None, subject=None, subject_pk_algorithm=None, extensions=None, notifications=None, origin=None, type=None, file_name=None, pa_status=None, local_vars_configuration=None):  # noqa: E501
        """RfidCertificateEx - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._serial_number = None
        self._signature_algorithm = None
        self._issuer = None
        self._validity = None
        self._subject = None
        self._subject_pk_algorithm = None
        self._extensions = None
        self._notifications = None
        self._origin = None
        self._type = None
        self._file_name = None
        self._pa_status = None
        self.discriminator = None

        self.version = version
        self.serial_number = serial_number
        self.signature_algorithm = signature_algorithm
        self.issuer = issuer
        self.validity = validity
        self.subject = subject
        self.subject_pk_algorithm = subject_pk_algorithm
        self.extensions = extensions
        self.notifications = notifications
        self.origin = origin
        self.type = type
        self.file_name = file_name
        self.pa_status = pa_status

    @property
    def version(self):
        """Gets the version of this RfidCertificateEx.  # noqa: E501

        Version of Certificate ASN.1 structure  # noqa: E501

        :return: The version of this RfidCertificateEx.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RfidCertificateEx.

        Version of Certificate ASN.1 structure  # noqa: E501

        :param version: The version of this RfidCertificateEx.  # noqa: E501
        :type version: float
        """

        self._version = version

    @property
    def serial_number(self):
        """Gets the serial_number of this RfidCertificateEx.  # noqa: E501

        Certificate serial number. Base64 encoded.  # noqa: E501

        :return: The serial_number of this RfidCertificateEx.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this RfidCertificateEx.

        Certificate serial number. Base64 encoded.  # noqa: E501

        :param serial_number: The serial_number of this RfidCertificateEx.  # noqa: E501
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this RfidCertificateEx.  # noqa: E501

        Certificate digital signature algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).  # noqa: E501

        :return: The signature_algorithm of this RfidCertificateEx.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this RfidCertificateEx.

        Certificate digital signature algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this RfidCertificateEx.  # noqa: E501
        :type signature_algorithm: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def issuer(self):
        """Gets the issuer of this RfidCertificateEx.  # noqa: E501


        :return: The issuer of this RfidCertificateEx.  # noqa: E501
        :rtype: RfidDistinguishedName
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this RfidCertificateEx.


        :param issuer: The issuer of this RfidCertificateEx.  # noqa: E501
        :type issuer: RfidDistinguishedName
        """

        self._issuer = issuer

    @property
    def validity(self):
        """Gets the validity of this RfidCertificateEx.  # noqa: E501


        :return: The validity of this RfidCertificateEx.  # noqa: E501
        :rtype: RfidValidity
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this RfidCertificateEx.


        :param validity: The validity of this RfidCertificateEx.  # noqa: E501
        :type validity: RfidValidity
        """

        self._validity = validity

    @property
    def subject(self):
        """Gets the subject of this RfidCertificateEx.  # noqa: E501


        :return: The subject of this RfidCertificateEx.  # noqa: E501
        :rtype: RfidDistinguishedName
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this RfidCertificateEx.


        :param subject: The subject of this RfidCertificateEx.  # noqa: E501
        :type subject: RfidDistinguishedName
        """

        self._subject = subject

    @property
    def subject_pk_algorithm(self):
        """Gets the subject_pk_algorithm of this RfidCertificateEx.  # noqa: E501

        Certificate public key algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).  # noqa: E501

        :return: The subject_pk_algorithm of this RfidCertificateEx.  # noqa: E501
        :rtype: str
        """
        return self._subject_pk_algorithm

    @subject_pk_algorithm.setter
    def subject_pk_algorithm(self, subject_pk_algorithm):
        """Sets the subject_pk_algorithm of this RfidCertificateEx.

        Certificate public key algorithm identifier (OID); String in the format S1 (S2), where S1 – algorithm name, S2 – identifier (OID string).  # noqa: E501

        :param subject_pk_algorithm: The subject_pk_algorithm of this RfidCertificateEx.  # noqa: E501
        :type subject_pk_algorithm: str
        """

        self._subject_pk_algorithm = subject_pk_algorithm

    @property
    def extensions(self):
        """Gets the extensions of this RfidCertificateEx.  # noqa: E501

        List of the certificate extensions  # noqa: E501

        :return: The extensions of this RfidCertificateEx.  # noqa: E501
        :rtype: list[RfidPkiExtension]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this RfidCertificateEx.

        List of the certificate extensions  # noqa: E501

        :param extensions: The extensions of this RfidCertificateEx.  # noqa: E501
        :type extensions: list[RfidPkiExtension]
        """

        self._extensions = extensions

    @property
    def notifications(self):
        """Gets the notifications of this RfidCertificateEx.  # noqa: E501

        List of remarks arisen during the analysis of the certificate data structure and its validity verification.  # noqa: E501

        :return: The notifications of this RfidCertificateEx.  # noqa: E501
        :rtype: list[ParsingErrorCodes]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this RfidCertificateEx.

        List of remarks arisen during the analysis of the certificate data structure and its validity verification.  # noqa: E501

        :param notifications: The notifications of this RfidCertificateEx.  # noqa: E501
        :type notifications: list[ParsingErrorCodes]
        """

        self._notifications = notifications

    @property
    def origin(self):
        """Gets the origin of this RfidCertificateEx.  # noqa: E501


        :return: The origin of this RfidCertificateEx.  # noqa: E501
        :rtype: RfidCertificateOrigin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this RfidCertificateEx.


        :param origin: The origin of this RfidCertificateEx.  # noqa: E501
        :type origin: RfidCertificateOrigin
        """

        self._origin = origin

    @property
    def type(self):
        """Gets the type of this RfidCertificateEx.  # noqa: E501


        :return: The type of this RfidCertificateEx.  # noqa: E501
        :rtype: RfidCertificateType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RfidCertificateEx.


        :param type: The type of this RfidCertificateEx.  # noqa: E501
        :type type: RfidCertificateType
        """

        self._type = type

    @property
    def file_name(self):
        """Gets the file_name of this RfidCertificateEx.  # noqa: E501


        :return: The file_name of this RfidCertificateEx.  # noqa: E501
        :rtype: TrfFtString
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this RfidCertificateEx.


        :param file_name: The file_name of this RfidCertificateEx.  # noqa: E501
        :type file_name: TrfFtString
        """

        self._file_name = file_name

    @property
    def pa_status(self):
        """Gets the pa_status of this RfidCertificateEx.  # noqa: E501


        :return: The pa_status of this RfidCertificateEx.  # noqa: E501
        :rtype: RFIDErrorCodes
        """
        return self._pa_status

    @pa_status.setter
    def pa_status(self, pa_status):
        """Sets the pa_status of this RfidCertificateEx.


        :param pa_status: The pa_status of this RfidCertificateEx.  # noqa: E501
        :type pa_status: RFIDErrorCodes
        """

        self._pa_status = pa_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidCertificateEx):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidCertificateEx):
            return True

        return self.to_dict() != other.to_dict()
