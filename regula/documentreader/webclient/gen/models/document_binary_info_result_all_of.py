# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Structure is used to store the data reading results from the RFID-chip in a form of a list of the logically separated data groups.
"""
class DocumentBinaryInfoResultAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        't_doc_binary_info': 'TDocBinaryInfo'
    }

    attribute_map = {
        't_doc_binary_info': 'TDocBinaryInfo'
    }

    def __init__(self, t_doc_binary_info=None, local_vars_configuration=None):  # noqa: E501
        """DocumentBinaryInfoResultAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._t_doc_binary_info = None
        self.discriminator = None

        self.t_doc_binary_info = t_doc_binary_info

    @property
    def t_doc_binary_info(self):
        """Gets the t_doc_binary_info of this DocumentBinaryInfoResultAllOf.  # noqa: E501


        :return: The t_doc_binary_info of this DocumentBinaryInfoResultAllOf.  # noqa: E501
        :rtype: TDocBinaryInfo
        """
        return self._t_doc_binary_info

    @t_doc_binary_info.setter
    def t_doc_binary_info(self, t_doc_binary_info):
        """Sets the t_doc_binary_info of this DocumentBinaryInfoResultAllOf.


        :param t_doc_binary_info: The t_doc_binary_info of this DocumentBinaryInfoResultAllOf.  # noqa: E501
        :type t_doc_binary_info: TDocBinaryInfo
        """
        if self.local_vars_configuration.client_side_validation and t_doc_binary_info is None:  # noqa: E501
            raise ValueError("Invalid value for `t_doc_binary_info`, must not be `None`")  # noqa: E501

        self._t_doc_binary_info = t_doc_binary_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentBinaryInfoResultAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentBinaryInfoResultAllOf):
            return True

        return self.to_dict() != other.to_dict()
