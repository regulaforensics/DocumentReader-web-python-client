# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Structure is used to describe the terminal type within the context of the communication session with electronic document
"""
class RfidTerminal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'term_type': 'RfidTerminalType',
        'auth_req': 'float',
        'auth_req2': 'float'
    }

    attribute_map = {
        'term_type': 'TermType',
        'auth_req': 'AuthReq',
        'auth_req2': 'AuthReq2'
    }

    def __init__(self, term_type=None, auth_req=None, auth_req2=None, local_vars_configuration=None):  # noqa: E501
        """RfidTerminal - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._term_type = None
        self._auth_req = None
        self._auth_req2 = None
        self.discriminator = None

        self.term_type = term_type
        self.auth_req = auth_req
        self.auth_req2 = auth_req2

    @property
    def term_type(self):
        """Gets the term_type of this RfidTerminal.  # noqa: E501


        :return: The term_type of this RfidTerminal.  # noqa: E501
        :rtype: RfidTerminalType
        """
        return self._term_type

    @term_type.setter
    def term_type(self, term_type):
        """Sets the term_type of this RfidTerminal.


        :param term_type: The term_type of this RfidTerminal.  # noqa: E501
        :type term_type: RfidTerminalType
        """
        if self.local_vars_configuration.client_side_validation and term_type is None:  # noqa: E501
            raise ValueError("Invalid value for `term_type`, must not be `None`")  # noqa: E501

        self._term_type = term_type

    @property
    def auth_req(self):
        """Gets the auth_req of this RfidTerminal.  # noqa: E501

        Declared (set) combination of flags of access rights to the functionality of the document (combination of eRfidTerminalAuthorizationRequirement values)  # noqa: E501

        :return: The auth_req of this RfidTerminal.  # noqa: E501
        :rtype: float
        """
        return self._auth_req

    @auth_req.setter
    def auth_req(self, auth_req):
        """Sets the auth_req of this RfidTerminal.

        Declared (set) combination of flags of access rights to the functionality of the document (combination of eRfidTerminalAuthorizationRequirement values)  # noqa: E501

        :param auth_req: The auth_req of this RfidTerminal.  # noqa: E501
        :type auth_req: float
        """
        if self.local_vars_configuration.client_side_validation and auth_req is None:  # noqa: E501
            raise ValueError("Invalid value for `auth_req`, must not be `None`")  # noqa: E501

        self._auth_req = auth_req

    @property
    def auth_req2(self):
        """Gets the auth_req2 of this RfidTerminal.  # noqa: E501

        Declared (set) combination of flags of access rights to the functionality of the document (combination of RfidTerminalAuthorizationRequirement values)  # noqa: E501

        :return: The auth_req2 of this RfidTerminal.  # noqa: E501
        :rtype: float
        """
        return self._auth_req2

    @auth_req2.setter
    def auth_req2(self, auth_req2):
        """Sets the auth_req2 of this RfidTerminal.

        Declared (set) combination of flags of access rights to the functionality of the document (combination of RfidTerminalAuthorizationRequirement values)  # noqa: E501

        :param auth_req2: The auth_req2 of this RfidTerminal.  # noqa: E501
        :type auth_req2: float
        """
        if self.local_vars_configuration.client_side_validation and auth_req2 is None:  # noqa: E501
            raise ValueError("Invalid value for `auth_req2`, must not be `None`")  # noqa: E501

        self._auth_req2 = auth_req2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidTerminal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidTerminal):
            return True

        return self.to_dict() != other.to_dict()
