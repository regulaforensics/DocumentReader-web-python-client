# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Structure is used to describe the results of a single authentication procedure or a procedure of secure data access within the context of the communication session with electronic document
"""
class RfidAccessControlInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'RfidAccessControlProcedureType',
        'status': 'RFIDErrorCodes',
        'active_option_idx': 'float',
        'notifications': 'list[ParsingErrorCodes]',
        'access_control_options': 'list[object]'
    }

    attribute_map = {
        'type': 'Type',
        'status': 'Status',
        'active_option_idx': 'ActiveOptionIdx',
        'notifications': 'Notifications',
        'access_control_options': 'AccessControlOptions'
    }

    def __init__(self, type=None, status=None, active_option_idx=None, notifications=None, access_control_options=None, local_vars_configuration=None):  # noqa: E501
        """RfidAccessControlInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._status = None
        self._active_option_idx = None
        self._notifications = None
        self._access_control_options = None
        self.discriminator = None

        self.type = type
        self.status = status
        if active_option_idx is not None:
            self.active_option_idx = active_option_idx
        self.notifications = notifications
        if access_control_options is not None:
            self.access_control_options = access_control_options

    @property
    def type(self):
        """Gets the type of this RfidAccessControlInfo.  # noqa: E501


        :return: The type of this RfidAccessControlInfo.  # noqa: E501
        :rtype: RfidAccessControlProcedureType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RfidAccessControlInfo.


        :param type: The type of this RfidAccessControlInfo.  # noqa: E501
        :type type: RfidAccessControlProcedureType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this RfidAccessControlInfo.  # noqa: E501


        :return: The status of this RfidAccessControlInfo.  # noqa: E501
        :rtype: RFIDErrorCodes
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RfidAccessControlInfo.


        :param status: The status of this RfidAccessControlInfo.  # noqa: E501
        :type status: RFIDErrorCodes
        """

        self._status = status

    @property
    def active_option_idx(self):
        """Gets the active_option_idx of this RfidAccessControlInfo.  # noqa: E501

        Index of the active variant of the procedure  # noqa: E501

        :return: The active_option_idx of this RfidAccessControlInfo.  # noqa: E501
        :rtype: float
        """
        return self._active_option_idx

    @active_option_idx.setter
    def active_option_idx(self, active_option_idx):
        """Sets the active_option_idx of this RfidAccessControlInfo.

        Index of the active variant of the procedure  # noqa: E501

        :param active_option_idx: The active_option_idx of this RfidAccessControlInfo.  # noqa: E501
        :type active_option_idx: float
        """

        self._active_option_idx = active_option_idx

    @property
    def notifications(self):
        """Gets the notifications of this RfidAccessControlInfo.  # noqa: E501

        List of remarks arisen during the procedure.  # noqa: E501

        :return: The notifications of this RfidAccessControlInfo.  # noqa: E501
        :rtype: list[ParsingErrorCodes]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this RfidAccessControlInfo.

        List of remarks arisen during the procedure.  # noqa: E501

        :param notifications: The notifications of this RfidAccessControlInfo.  # noqa: E501
        :type notifications: list[ParsingErrorCodes]
        """

        self._notifications = notifications

    @property
    def access_control_options(self):
        """Gets the access_control_options of this RfidAccessControlInfo.  # noqa: E501

        List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document  # noqa: E501

        :return: The access_control_options of this RfidAccessControlInfo.  # noqa: E501
        :rtype: list[object]
        """
        return self._access_control_options

    @access_control_options.setter
    def access_control_options(self, access_control_options):
        """Sets the access_control_options of this RfidAccessControlInfo.

        List of structures with are used to describe the variants of the authentication or secure data access procedure performance within the context of the communication session with electronic document  # noqa: E501

        :param access_control_options: The access_control_options of this RfidAccessControlInfo.  # noqa: E501
        :type access_control_options: list[object]
        """

        self._access_control_options = access_control_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidAccessControlInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidAccessControlInfo):
            return True

        return self.to_dict() != other.to_dict()
