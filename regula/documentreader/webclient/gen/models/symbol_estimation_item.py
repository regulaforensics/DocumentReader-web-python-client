# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from regula.documentreader.webclient.gen.models.rectangle_coordinates import RectangleCoordinates
from typing import Optional, Set
from typing_extensions import Self

class SymbolEstimationItem(BaseModel):
    """
    SymbolEstimationItem
    """ # noqa: E501
    alignment_nearest_symbols: StrictInt = Field(alias="ALIGNMENT_NEAREST_SYMBOLS")
    contrast_print: StrictInt = Field(alias="CONTRAST_PRINT")
    contrast_symbol: StrictInt = Field(alias="CONTRAST_SYMBOL")
    char_symbol: StrictInt = Field(alias="CharSymbol")
    edge: StrictInt = Field(alias="EDGE")
    emptiness: StrictInt = Field(alias="EMPTINESS")
    stain: StrictInt = Field(alias="STAIN")
    symbols_interval: StrictInt = Field(alias="SYMBOLS_INTERVAL")
    symbol_param: StrictInt = Field(alias="SYMBOL_PARAM")
    symbol_size: StrictInt = Field(alias="SYMBOL_SIZE")
    size_error_align_with_next: Union[StrictFloat, StrictInt] = Field(alias="SizeErrorAlignWithNext")
    size_error_align_with_prev: Union[StrictFloat, StrictInt] = Field(alias="SizeErrorAlignWithPrev")
    size_error_interv_with_next: Union[StrictFloat, StrictInt] = Field(alias="SizeErrorIntervWithNext")
    size_error_interv_with_prev: Union[StrictFloat, StrictInt] = Field(alias="SizeErrorIntervWithPrev")
    size_error_symbol_height: Union[StrictFloat, StrictInt] = Field(alias="SizeErrorSymbolHeight")
    size_error_symbol_width: Union[StrictFloat, StrictInt] = Field(alias="SizeErrorSymbolWidth")
    symbol_bounds: RectangleCoordinates = Field(alias="SymbolBounds")
    __properties: ClassVar[List[str]] = ["ALIGNMENT_NEAREST_SYMBOLS", "CONTRAST_PRINT", "CONTRAST_SYMBOL", "CharSymbol", "EDGE", "EMPTINESS", "STAIN", "SYMBOLS_INTERVAL", "SYMBOL_PARAM", "SYMBOL_SIZE", "SizeErrorAlignWithNext", "SizeErrorAlignWithPrev", "SizeErrorIntervWithNext", "SizeErrorIntervWithPrev", "SizeErrorSymbolHeight", "SizeErrorSymbolWidth", "SymbolBounds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SymbolEstimationItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of symbol_bounds
        if self.symbol_bounds:
            _dict['SymbolBounds'] = self.symbol_bounds.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SymbolEstimationItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ALIGNMENT_NEAREST_SYMBOLS": obj.get("ALIGNMENT_NEAREST_SYMBOLS"),
            "CONTRAST_PRINT": obj.get("CONTRAST_PRINT"),
            "CONTRAST_SYMBOL": obj.get("CONTRAST_SYMBOL"),
            "CharSymbol": obj.get("CharSymbol"),
            "EDGE": obj.get("EDGE"),
            "EMPTINESS": obj.get("EMPTINESS"),
            "STAIN": obj.get("STAIN"),
            "SYMBOLS_INTERVAL": obj.get("SYMBOLS_INTERVAL"),
            "SYMBOL_PARAM": obj.get("SYMBOL_PARAM"),
            "SYMBOL_SIZE": obj.get("SYMBOL_SIZE"),
            "SizeErrorAlignWithNext": obj.get("SizeErrorAlignWithNext"),
            "SizeErrorAlignWithPrev": obj.get("SizeErrorAlignWithPrev"),
            "SizeErrorIntervWithNext": obj.get("SizeErrorIntervWithNext"),
            "SizeErrorIntervWithPrev": obj.get("SizeErrorIntervWithPrev"),
            "SizeErrorSymbolHeight": obj.get("SizeErrorSymbolHeight"),
            "SizeErrorSymbolWidth": obj.get("SizeErrorSymbolWidth"),
            "SymbolBounds": RectangleCoordinates.from_dict(obj["SymbolBounds"]) if obj.get("SymbolBounds") is not None else None
        })
        return _obj


