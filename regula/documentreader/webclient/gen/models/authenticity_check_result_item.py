# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from regula.documentreader.webclient.gen.models.authenticity_result_type import AuthenticityResultType
from regula.documentreader.webclient.gen.models.check_diagnose import CheckDiagnose
from regula.documentreader.webclient.gen.models.check_result import CheckResult
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from regula.documentreader.webclient.gen.models.security_feature_result import SecurityFeatureResult
    from regula.documentreader.webclient.gen.models.ident_result import IdentResult
    from regula.documentreader.webclient.gen.models.ident_result import IdentResult
    from regula.documentreader.webclient.gen.models.photo_ident_result import PhotoIdentResult
    from regula.documentreader.webclient.gen.models.ident_result import IdentResult
    from regula.documentreader.webclient.gen.models.fiber_result import FiberResult
    from regula.documentreader.webclient.gen.models.fiber_result import FiberResult
    from regula.documentreader.webclient.gen.models.ocr_security_text_result import OCRSecurityTextResult
    from regula.documentreader.webclient.gen.models.security_feature_result import SecurityFeatureResult
    from regula.documentreader.webclient.gen.models.ident_result import IdentResult
    from regula.documentreader.webclient.gen.models.ident_result import IdentResult
    from regula.documentreader.webclient.gen.models.security_feature_result import SecurityFeatureResult
    from regula.documentreader.webclient.gen.models.photo_ident_result import PhotoIdentResult
    from regula.documentreader.webclient.gen.models.ident_result import IdentResult
    from regula.documentreader.webclient.gen.models.ident_result import IdentResult
    from regula.documentreader.webclient.gen.models.ident_result import IdentResult
    from regula.documentreader.webclient.gen.models.ident_result import IdentResult
    from regula.documentreader.webclient.gen.models.security_feature_result import SecurityFeatureResult
    from regula.documentreader.webclient.gen.models.security_feature_result import SecurityFeatureResult
    from regula.documentreader.webclient.gen.models.security_feature_result import SecurityFeatureResult
    from regula.documentreader.webclient.gen.models.ident_result import IdentResult
    from regula.documentreader.webclient.gen.models.ocr_security_text_result import OCRSecurityTextResult
    from regula.documentreader.webclient.gen.models.security_feature_result import SecurityFeatureResult
    from regula.documentreader.webclient.gen.models.security_feature_result import SecurityFeatureResult
    from regula.documentreader.webclient.gen.models.security_feature_result import SecurityFeatureResult
    from regula.documentreader.webclient.gen.models.security_feature_result import SecurityFeatureResult

class AuthenticityCheckResultItem(BaseModel):
    """
    Common fields for all authenticity result objects
    """ # noqa: E501
    type: AuthenticityResultType = Field(alias="Type")
    element_result: Optional[CheckResult] = Field(default=None, alias="ElementResult")
    element_diagnose: Optional[CheckDiagnose] = Field(default=None, alias="ElementDiagnose")
    percent_value: Optional[StrictInt] = Field(default=None, alias="PercentValue")
    __properties: ClassVar[List[str]] = ["Type", "ElementResult", "ElementDiagnose", "PercentValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'Type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        '1': 'SecurityFeatureResult','1024': 'IdentResult','1048576': 'IdentResult','128': 'PhotoIdentResult','131072': 'IdentResult','16': 'FiberResult','16384': 'FiberResult','16777216': 'OCRSecurityTextResult','2': 'SecurityFeatureResult','2048': 'IdentResult','2097152': 'IdentResult','2147483648': 'SecurityFeatureResult','256': 'PhotoIdentResult','262144': 'IdentResult','32': 'IdentResult','32768': 'IdentResult','4': 'IdentResult','4096': 'SecurityFeatureResult','4194304': 'SecurityFeatureResult','512': 'SecurityFeatureResult','524288': 'IdentResult','64': 'OCRSecurityTextResult','65536': 'SecurityFeatureResult','8': 'SecurityFeatureResult','8192': 'SecurityFeatureResult','8388608': 'SecurityFeatureResult'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(str(discriminator_value))
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[SecurityFeatureResult, IdentResult, IdentResult, PhotoIdentResult, IdentResult, FiberResult, FiberResult, OCRSecurityTextResult, SecurityFeatureResult, IdentResult, IdentResult, SecurityFeatureResult, PhotoIdentResult, IdentResult, IdentResult, IdentResult, IdentResult, SecurityFeatureResult, SecurityFeatureResult, SecurityFeatureResult, IdentResult, OCRSecurityTextResult, SecurityFeatureResult, SecurityFeatureResult, SecurityFeatureResult, SecurityFeatureResult]]:
        """Create an instance of AuthenticityCheckResultItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[SecurityFeatureResult, IdentResult, IdentResult, PhotoIdentResult, IdentResult, FiberResult, FiberResult, OCRSecurityTextResult, SecurityFeatureResult, IdentResult, IdentResult, SecurityFeatureResult, PhotoIdentResult, IdentResult, IdentResult, IdentResult, IdentResult, SecurityFeatureResult, SecurityFeatureResult, SecurityFeatureResult, IdentResult, OCRSecurityTextResult, SecurityFeatureResult, SecurityFeatureResult, SecurityFeatureResult, SecurityFeatureResult]]:
        """Create an instance of AuthenticityCheckResultItem from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'SecurityFeatureResult':
            return import_module("regula.documentreader.webclient.gen.models.security_feature_result").SecurityFeatureResult.from_dict(obj)
        if object_type ==  'IdentResult':
            return import_module("regula.documentreader.webclient.gen.models.ident_result").IdentResult.from_dict(obj)
        if object_type ==  'IdentResult':
            return import_module("regula.documentreader.webclient.gen.models.ident_result").IdentResult.from_dict(obj)
        if object_type ==  'PhotoIdentResult':
            return import_module("regula.documentreader.webclient.gen.models.photo_ident_result").PhotoIdentResult.from_dict(obj)
        if object_type ==  'IdentResult':
            return import_module("regula.documentreader.webclient.gen.models.ident_result").IdentResult.from_dict(obj)
        if object_type ==  'FiberResult':
            return import_module("regula.documentreader.webclient.gen.models.fiber_result").FiberResult.from_dict(obj)
        if object_type ==  'FiberResult':
            return import_module("regula.documentreader.webclient.gen.models.fiber_result").FiberResult.from_dict(obj)
        if object_type ==  'OCRSecurityTextResult':
            return import_module("regula.documentreader.webclient.gen.models.ocr_security_text_result").OCRSecurityTextResult.from_dict(obj)
        if object_type ==  'SecurityFeatureResult':
            return import_module("regula.documentreader.webclient.gen.models.security_feature_result").SecurityFeatureResult.from_dict(obj)
        if object_type ==  'IdentResult':
            return import_module("regula.documentreader.webclient.gen.models.ident_result").IdentResult.from_dict(obj)
        if object_type ==  'IdentResult':
            return import_module("regula.documentreader.webclient.gen.models.ident_result").IdentResult.from_dict(obj)
        if object_type ==  'SecurityFeatureResult':
            return import_module("regula.documentreader.webclient.gen.models.security_feature_result").SecurityFeatureResult.from_dict(obj)
        if object_type ==  'PhotoIdentResult':
            return import_module("regula.documentreader.webclient.gen.models.photo_ident_result").PhotoIdentResult.from_dict(obj)
        if object_type ==  'IdentResult':
            return import_module("regula.documentreader.webclient.gen.models.ident_result").IdentResult.from_dict(obj)
        if object_type ==  'IdentResult':
            return import_module("regula.documentreader.webclient.gen.models.ident_result").IdentResult.from_dict(obj)
        if object_type ==  'IdentResult':
            return import_module("regula.documentreader.webclient.gen.models.ident_result").IdentResult.from_dict(obj)
        if object_type ==  'IdentResult':
            return import_module("regula.documentreader.webclient.gen.models.ident_result").IdentResult.from_dict(obj)
        if object_type ==  'SecurityFeatureResult':
            return import_module("regula.documentreader.webclient.gen.models.security_feature_result").SecurityFeatureResult.from_dict(obj)
        if object_type ==  'SecurityFeatureResult':
            return import_module("regula.documentreader.webclient.gen.models.security_feature_result").SecurityFeatureResult.from_dict(obj)
        if object_type ==  'SecurityFeatureResult':
            return import_module("regula.documentreader.webclient.gen.models.security_feature_result").SecurityFeatureResult.from_dict(obj)
        if object_type ==  'IdentResult':
            return import_module("regula.documentreader.webclient.gen.models.ident_result").IdentResult.from_dict(obj)
        if object_type ==  'OCRSecurityTextResult':
            return import_module("regula.documentreader.webclient.gen.models.ocr_security_text_result").OCRSecurityTextResult.from_dict(obj)
        if object_type ==  'SecurityFeatureResult':
            return import_module("regula.documentreader.webclient.gen.models.security_feature_result").SecurityFeatureResult.from_dict(obj)
        if object_type ==  'SecurityFeatureResult':
            return import_module("regula.documentreader.webclient.gen.models.security_feature_result").SecurityFeatureResult.from_dict(obj)
        if object_type ==  'SecurityFeatureResult':
            return import_module("regula.documentreader.webclient.gen.models.security_feature_result").SecurityFeatureResult.from_dict(obj)
        if object_type ==  'SecurityFeatureResult':
            return import_module("regula.documentreader.webclient.gen.models.security_feature_result").SecurityFeatureResult.from_dict(obj)

        raise ValueError("AuthenticityCheckResultItem failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


