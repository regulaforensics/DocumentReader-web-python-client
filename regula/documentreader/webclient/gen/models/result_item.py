# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from regula.documentreader.webclient.gen.models.result import Result
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from regula.documentreader.webclient.gen.models.document_image_result import DocumentImageResult
    from regula.documentreader.webclient.gen.models.document_binary_info_result import DocumentBinaryInfoResult
    from regula.documentreader.webclient.gen.models.rfid_text_data_result import RFIDTextDataResult
    from regula.documentreader.webclient.gen.models.graphics_result import GraphicsResult
    from regula.documentreader.webclient.gen.models.document_binary_info_result import DocumentBinaryInfoResult
    from regula.documentreader.webclient.gen.models.rfid_graphics_info_result import RFIDGraphicsInfoResult
    from regula.documentreader.webclient.gen.models.byte_array_result import ByteArrayResult
    from regula.documentreader.webclient.gen.models.lexical_analysis_result import LexicalAnalysisResult
    from regula.documentreader.webclient.gen.models.document_image_result import DocumentImageResult
    from regula.documentreader.webclient.gen.models.text_data_result import TextDataResult
    from regula.documentreader.webclient.gen.models.text_data_result import TextDataResult
    from regula.documentreader.webclient.gen.models.graphics_result import GraphicsResult
    from regula.documentreader.webclient.gen.models.authenticity_result import AuthenticityResult
    from regula.documentreader.webclient.gen.models.text_data_result import TextDataResult
    from regula.documentreader.webclient.gen.models.text_data_result import TextDataResult
    from regula.documentreader.webclient.gen.models.image_quality_result import ImageQualityResult
    from regula.documentreader.webclient.gen.models.graphics_result import GraphicsResult
    from regula.documentreader.webclient.gen.models.status_result import StatusResult
    from regula.documentreader.webclient.gen.models.authenticity_result import AuthenticityResult
    from regula.documentreader.webclient.gen.models.graphics_result import GraphicsResult
    from regula.documentreader.webclient.gen.models.text_result import TextResult
    from regula.documentreader.webclient.gen.models.images_result import ImagesResult
    from regula.documentreader.webclient.gen.models.graphics_result import GraphicsResult
    from regula.documentreader.webclient.gen.models.authenticity_result import AuthenticityResult
    from regula.documentreader.webclient.gen.models.encrypted_rcl_result import EncryptedRCLResult
    from regula.documentreader.webclient.gen.models.doc_bar_code_info import DocBarCodeInfo
    from regula.documentreader.webclient.gen.models.license_result import LicenseResult
    from regula.documentreader.webclient.gen.models.graphics_result import GraphicsResult
    from regula.documentreader.webclient.gen.models.mrz_position_result import MRZPositionResult
    from regula.documentreader.webclient.gen.models.document_position_result import DocumentPositionResult
    from regula.documentreader.webclient.gen.models.mrz_test_quality_result import MRZTestQualityResult
    from regula.documentreader.webclient.gen.models.document_types_candidates_result import DocumentTypesCandidatesResult
    from regula.documentreader.webclient.gen.models.document_position_result import DocumentPositionResult
    from regula.documentreader.webclient.gen.models.mrz_detector_result import MRZDetectorResult
    from regula.documentreader.webclient.gen.models.chosen_document_type_result import ChosenDocumentTypeResult
    from regula.documentreader.webclient.gen.models.face_detection_result import FaceDetectionResult

class ResultItem(BaseModel):
    """
    Common fields for all result objects
    """ # noqa: E501
    buf_length: Optional[StrictInt] = None
    light: Optional[StrictInt] = None
    list_idx: Optional[StrictInt] = None
    page_idx: Optional[StrictInt] = None
    result_type: Result
    __properties: ClassVar[List[str]] = ["buf_length", "light", "list_idx", "page_idx", "result_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'result_type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        '1': 'DocumentImageResult','101': 'DocumentBinaryInfoResult','102': 'RFIDTextDataResult','103': 'GraphicsResult','104': 'DocumentBinaryInfoResult','105': 'RFIDGraphicsInfoResult','109': 'ByteArrayResult','15': 'LexicalAnalysisResult','16': 'DocumentImageResult','17': 'TextDataResult','18': 'TextDataResult','19': 'GraphicsResult','20': 'AuthenticityResult','26': 'TextDataResult','3': 'TextDataResult','30': 'ImageQualityResult','32': 'GraphicsResult','33': 'StatusResult','34': 'AuthenticityResult','35': 'GraphicsResult','36': 'TextResult','37': 'ImagesResult','38': 'GraphicsResult','39': 'AuthenticityResult','49': 'EncryptedRCLResult','5': 'DocBarCodeInfo','50': 'LicenseResult','6': 'GraphicsResult','61': 'MRZPositionResult','62': 'DocumentPositionResult','7': 'MRZTestQualityResult','8': 'DocumentTypesCandidatesResult','85': 'DocumentPositionResult','87': 'MRZDetectorResult','9': 'ChosenDocumentTypeResult','97': 'FaceDetectionResult'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(str(discriminator_value))
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[DocumentImageResult, DocumentBinaryInfoResult, RFIDTextDataResult, GraphicsResult, DocumentBinaryInfoResult, RFIDGraphicsInfoResult, ByteArrayResult, LexicalAnalysisResult, DocumentImageResult, TextDataResult, TextDataResult, GraphicsResult, AuthenticityResult, TextDataResult, TextDataResult, ImageQualityResult, GraphicsResult, StatusResult, AuthenticityResult, GraphicsResult, TextResult, ImagesResult, GraphicsResult, AuthenticityResult, EncryptedRCLResult, DocBarCodeInfo, LicenseResult, GraphicsResult, MRZPositionResult, DocumentPositionResult, MRZTestQualityResult, DocumentTypesCandidatesResult, DocumentPositionResult, MRZDetectorResult, ChosenDocumentTypeResult, FaceDetectionResult]]:
        """Create an instance of ResultItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[DocumentImageResult, DocumentBinaryInfoResult, RFIDTextDataResult, GraphicsResult, DocumentBinaryInfoResult, RFIDGraphicsInfoResult, ByteArrayResult, LexicalAnalysisResult, DocumentImageResult, TextDataResult, TextDataResult, GraphicsResult, AuthenticityResult, TextDataResult, TextDataResult, ImageQualityResult, GraphicsResult, StatusResult, AuthenticityResult, GraphicsResult, TextResult, ImagesResult, GraphicsResult, AuthenticityResult, EncryptedRCLResult, DocBarCodeInfo, LicenseResult, GraphicsResult, MRZPositionResult, DocumentPositionResult, MRZTestQualityResult, DocumentTypesCandidatesResult, DocumentPositionResult, MRZDetectorResult, ChosenDocumentTypeResult, FaceDetectionResult]]:
        """Create an instance of ResultItem from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'DocumentImageResult':
            return import_module("regula.documentreader.webclient.gen.models.document_image_result").DocumentImageResult.from_dict(obj)
        if object_type ==  'DocumentBinaryInfoResult':
            return import_module("regula.documentreader.webclient.gen.models.document_binary_info_result").DocumentBinaryInfoResult.from_dict(obj)
        if object_type ==  'RFIDTextDataResult':
            return import_module("regula.documentreader.webclient.gen.models.rfid_text_data_result").RFIDTextDataResult.from_dict(obj)
        if object_type ==  'GraphicsResult':
            return import_module("regula.documentreader.webclient.gen.models.graphics_result").GraphicsResult.from_dict(obj)
        if object_type ==  'DocumentBinaryInfoResult':
            return import_module("regula.documentreader.webclient.gen.models.document_binary_info_result").DocumentBinaryInfoResult.from_dict(obj)
        if object_type ==  'RFIDGraphicsInfoResult':
            return import_module("regula.documentreader.webclient.gen.models.rfid_graphics_info_result").RFIDGraphicsInfoResult.from_dict(obj)
        if object_type ==  'ByteArrayResult':
            return import_module("regula.documentreader.webclient.gen.models.byte_array_result").ByteArrayResult.from_dict(obj)
        if object_type ==  'LexicalAnalysisResult':
            return import_module("regula.documentreader.webclient.gen.models.lexical_analysis_result").LexicalAnalysisResult.from_dict(obj)
        if object_type ==  'DocumentImageResult':
            return import_module("regula.documentreader.webclient.gen.models.document_image_result").DocumentImageResult.from_dict(obj)
        if object_type ==  'TextDataResult':
            return import_module("regula.documentreader.webclient.gen.models.text_data_result").TextDataResult.from_dict(obj)
        if object_type ==  'TextDataResult':
            return import_module("regula.documentreader.webclient.gen.models.text_data_result").TextDataResult.from_dict(obj)
        if object_type ==  'GraphicsResult':
            return import_module("regula.documentreader.webclient.gen.models.graphics_result").GraphicsResult.from_dict(obj)
        if object_type ==  'AuthenticityResult':
            return import_module("regula.documentreader.webclient.gen.models.authenticity_result").AuthenticityResult.from_dict(obj)
        if object_type ==  'TextDataResult':
            return import_module("regula.documentreader.webclient.gen.models.text_data_result").TextDataResult.from_dict(obj)
        if object_type ==  'TextDataResult':
            return import_module("regula.documentreader.webclient.gen.models.text_data_result").TextDataResult.from_dict(obj)
        if object_type ==  'ImageQualityResult':
            return import_module("regula.documentreader.webclient.gen.models.image_quality_result").ImageQualityResult.from_dict(obj)
        if object_type ==  'GraphicsResult':
            return import_module("regula.documentreader.webclient.gen.models.graphics_result").GraphicsResult.from_dict(obj)
        if object_type ==  'StatusResult':
            return import_module("regula.documentreader.webclient.gen.models.status_result").StatusResult.from_dict(obj)
        if object_type ==  'AuthenticityResult':
            return import_module("regula.documentreader.webclient.gen.models.authenticity_result").AuthenticityResult.from_dict(obj)
        if object_type ==  'GraphicsResult':
            return import_module("regula.documentreader.webclient.gen.models.graphics_result").GraphicsResult.from_dict(obj)
        if object_type ==  'TextResult':
            return import_module("regula.documentreader.webclient.gen.models.text_result").TextResult.from_dict(obj)
        if object_type ==  'ImagesResult':
            return import_module("regula.documentreader.webclient.gen.models.images_result").ImagesResult.from_dict(obj)
        if object_type ==  'GraphicsResult':
            return import_module("regula.documentreader.webclient.gen.models.graphics_result").GraphicsResult.from_dict(obj)
        if object_type ==  'AuthenticityResult':
            return import_module("regula.documentreader.webclient.gen.models.authenticity_result").AuthenticityResult.from_dict(obj)
        if object_type ==  'EncryptedRCLResult':
            return import_module("regula.documentreader.webclient.gen.models.encrypted_rcl_result").EncryptedRCLResult.from_dict(obj)
        if object_type ==  'DocBarCodeInfo':
            return import_module("regula.documentreader.webclient.gen.models.doc_bar_code_info").DocBarCodeInfo.from_dict(obj)
        if object_type ==  'LicenseResult':
            return import_module("regula.documentreader.webclient.gen.models.license_result").LicenseResult.from_dict(obj)
        if object_type ==  'GraphicsResult':
            return import_module("regula.documentreader.webclient.gen.models.graphics_result").GraphicsResult.from_dict(obj)
        if object_type ==  'MRZPositionResult':
            return import_module("regula.documentreader.webclient.gen.models.mrz_position_result").MRZPositionResult.from_dict(obj)
        if object_type ==  'DocumentPositionResult':
            return import_module("regula.documentreader.webclient.gen.models.document_position_result").DocumentPositionResult.from_dict(obj)
        if object_type ==  'MRZTestQualityResult':
            return import_module("regula.documentreader.webclient.gen.models.mrz_test_quality_result").MRZTestQualityResult.from_dict(obj)
        if object_type ==  'DocumentTypesCandidatesResult':
            return import_module("regula.documentreader.webclient.gen.models.document_types_candidates_result").DocumentTypesCandidatesResult.from_dict(obj)
        if object_type ==  'DocumentPositionResult':
            return import_module("regula.documentreader.webclient.gen.models.document_position_result").DocumentPositionResult.from_dict(obj)
        if object_type ==  'MRZDetectorResult':
            return import_module("regula.documentreader.webclient.gen.models.mrz_detector_result").MRZDetectorResult.from_dict(obj)
        if object_type ==  'ChosenDocumentTypeResult':
            return import_module("regula.documentreader.webclient.gen.models.chosen_document_type_result").ChosenDocumentTypeResult.from_dict(obj)
        if object_type ==  'FaceDetectionResult':
            return import_module("regula.documentreader.webclient.gen.models.face_detection_result").FaceDetectionResult.from_dict(obj)

        raise ValueError("ResultItem failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


