# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
The enumeration contains error codes that can return during the RFID chip processing.
"""
class ParsingErrorCodes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    errLDS_Ok = int("1")

    errLDS_ASN_IncorrectData = int("-2147483647")

    errLDS_ASN_NotEnoughData = int("-2147483646")

    errLDS_ASN_Contents_UnexpectedData = int("-2147483645")

    errLDS_ASN_SignedData_IncorrectData = int("-2147483640")

    errLDS_ASN_SignedData_EncapContents_IncorrectData = int("-2147483639")

    errLDS_ASN_SignedData_Version_IncorrectData = int("-2147483638")

    errLDS_ASN_SignedData_DigestAlgorithms_IncorrectData = int("-2147483631")

    errLDS_ASN_LDSObject_IncorrectData = int("-2147483629")

    errLDS_ASN_LDSObject_Version_IncorrectData = int("-2147483628")

    errLDS_ASN_LDSObject_DigestAlgorithm_IncorrectData = int("-2147483627")

    errLDS_ASN_LDSObject_DGHashes_IncorrectData = int("-2147483626")

    errLDS_ASN_LDSObject_VersionInfo_IncorrectData = int("-2147483630")

    errLDS_ASN_Certificate_IncorrectData = int("-2147483625")

    errLDS_ASN_Certificate_Version_IncorrectData = int("-2147483624")

    errLDS_ASN_Certificate_SN_IncorrectData = int("-2147483623")

    errLDS_ASN_Certificate_Signature_IncorrectData = int("-2147483622")

    errLDS_ASN_Certificate_Issuer_IncorrectData = int("-2147483621")

    errLDS_ASN_Certificate_Validity_IncorrectData = int("-2147483620")

    errLDS_ASN_Certificate_Subject_IncorrectData = int("-2147483619")

    errLDS_ASN_Certificate_SubjectPK_IncorrectData = int("-2147483618")

    errLDS_ASN_Certificate_Extensions_IncorrectData = int("-2147483617")

    errLDS_ASN_SignerInfo_IncorrectData = int("-2147483616")

    errLDS_ASN_SignerInfo_Version_IncorrectData = int("-2147483615")

    errLDS_ASN_SignerInfo_SID_IncorrectData = int("-2147483614")

    errLDS_ASN_SignerInfo_DigestAlg_IncorrectData = int("-2147483613")

    errLDS_ASN_SignerInfo_SignedAttrs_IncorrectData = int("-2147483612")

    errLDS_ASN_SignerInfo_SignAlg_IncorrectData = int("-2147483611")

    errLDS_ASN_SignerInfo_Signature_IncorrectData = int("-2147483610")

    errLDS_ASN_SignerInfo_UnsignedAttrs_IncorrectData = int("-2147483609")

    errLDS_ICAO_LDSObject_UnsupportedDigestAlgorithm = int("-2147483600")

    errLDS_ICAO_SignedData_SignerInfos_Empty = int("-2147483599")

    errLDS_ICAO_SignerInfo_UnsupportedDigestAlgorithm = int("-2147483598")

    errLDS_ICAO_SignerInfo_UnsupportedSignatureAlgorithm = int("-2147483597")

    errLDS_ICAO_SignerInfo_MessageDigestError = int("-2147483596")

    errLDS_ICAO_SignerInfo_SignedAttrs_Missed = int("-2147483594")

    errLDS_Auth_SignerInfo_CantFindCertificate = int("-2147483595")

    errLDS_Auth_Error = int("-2147483568")

    errLDS_Auth_UnsupportedSignatureAlgorithm = int("-2147483567")

    errLDS_Auth_UnsupportedPublicKeyAlgorithm = int("-2147483566")

    errLDS_Auth_MessedAlgorithms = int("-2147483565")

    errLDS_Auth_PublicKeyDataInvalid = int("-2147483564")

    errLDS_Auth_AlgorithmParametersDataInvalid = int("-2147483563")

    errLDS_Auth_SignatureDataInvalid = int("-2147483562")

    errLDS_Auth_UnsupportedDigestAlgorithm = int("-2147483561")

    errLDS_Auth_SignatureDataIncorrect = int("-2147483560")

    errLDS_Auth_AlgorithmParametersNotDefined = int("-2147483559")

    errLDS_Auth_SignatureCheckFailed = int("-2147483558")

    errLDS_DG_WrongTag = int("-2147483536")

    errLDS_DG_Contents_UnexpectedData = int("-2147483535")

    errLDS_BAP_SymmetricCypher_CantInitialize = int("-2130706415")

    errLDS_PACE_Info_NotAvailable = int("-2130706400")

    errLDS_PACE_SymmetricCypher_CantInitialize = int("-2130706399")

    errLDS_PACE_KeyAgreement_CantInitialize = int("-2130706398")

    errLDS_PACE_EphemeralKeys_CantCreate = int("-2130706397")

    errLDS_PACE_Mapping_CantDecodeNonce = int("-2130706396")

    errLDS_PACE_SharedSecret_CantCreate = int("-2130706395")

    errLDS_PACE_DomainParams_UnsupportedFormat = int("-2130706394")

    errLDS_PACE_EphemeralKeys_Incorrect = int("-2130706393")

    errLDS_PACE_Mapping_EphemeralKeys_Incorrect = int("-2130706392")

    errLDS_PACE_Mapping_CantPerform = int("-2130706391")

    errLDS_PACE_NonMatchingAuthTokens = int("-2130706390")

    errLDS_PACE_CAM_Data_Incorrect = int("-2130706389")

    errLDS_PACE_CAM_Data_CantVerify = int("-2130706388")

    errLDS_PACE_CAM_Data_NonMatching = int("-2130706387")

    errLDS_PACE_IM_Scheme_Incorrect = int("-2130706386")

    errLDS_PACE_IM_RandomMapping_Failed = int("-2130706385")

    errLDS_CA_CantFindPublicKey = int("-2130706384")

    errLDS_CA_CantFindInfo = int("-2130706383")

    errLDS_CA_IncorrectVersion = int("-2130706382")

    errLDS_CA_CantFindDomainParameters = int("-2130706381")

    errLDS_CA_KeyAgreement_CantInitialize = int("-2130706380")

    errLDS_CA_PublicKey_UnsupportedAlgorithm = int("-2130706379")

    errLDS_CA_EphemeralKeys_CantCreate = int("-2130706378")

    errLDS_CA_SharedSecret_CantCreate = int("-2130706377")

    errLDS_CA_NonMatchingAuthTokens = int("-2130706376")

    errLDS_TA_IncorrectVersion = int("-2130706368")

    errLDS_TA_CantBuildCertificateChain = int("-2130706367")

    errLDS_TA_CantFindISPrivateKey = int("-2130706366")

    errLDS_TA_PublicKey_UnsupportedAlgorithm = int("-2130706365")

    errLDS_TA_SignatureBuildingError = int("-2130706364")

    errLDS_TA_InvalidKeyAlgorithmParameters = int("-2130706363")

    errLDS_AA_PublicKey_UnsupportedAlgorithm = int("-2130706352")

    errLDS_AA_PublicKey_IncorrectData = int("-2130706351")

    errLDS_AA_PublicKey_IncorrectParameters = int("-2130706350")

    errLDS_AA_PublicKey_UndefinedParameters = int("-2130706349")

    errLDS_AA_Signature_IncorrectData = int("-2130706348")

    errLDS_AA_UnsupportedRecoveryScheme = int("-2130706347")

    errLDS_AA_IncorrectTrailer = int("-2130706346")

    errLDS_AA_UnsupportedDigestAlgorithm = int("-2130706345")

    errLDS_RI_SectorKey_CantFind = int("-2130706320")

    errLDS_RI_SectorKey_IncorrectData = int("-2130706319")

    errLDS_RI_SectorKey_IncompleteData = int("-2130706318")

    errLDS_CV_Certificate_MissingMandatoryData_PK = int("-2130706336")

    errLDS_CV_Certificate_PublicKey_Unsupported = int("-2130706334")

    errLDS_CV_Certificate_CHAT_UnsupportedTerminalType = int("-2130706333")

    errLDS_CV_Certificate_PrivateKey_Unsupported = int("-2130706332")

    errLDS_CV_Certificate_PrivateKey_InvalidParams = int("-2130706331")

    errLDS_CV_Certificate_IncorrectData = int("-2130706080")

    errLDS_CV_Certificate_CPI_IncorrectData = int("-2130706079")

    errLDS_CV_Certificate_CAR_IncorrectData = int("-2130706078")

    errLDS_CV_Certificate_PublicKey_IncorrectData = int("-2130706077")

    errLDS_CV_Certificate_CHR_IncorrectData = int("-2130706076")

    errLDS_CV_Certificate_CHAT_IncorrectData = int("-2130706075")

    errLDS_CV_Certificate_ValidFrom_IncorrectData = int("-2130706074")

    errLDS_CV_Certificate_ValidTo_IncorrectData = int("-2130706073")

    errLDS_CV_Certificate_Extensions_IncorrectData = int("-2130706072")

    errLDS_CV_Certificate_PrivateKey_IncorrectData = int("-2130706071")

    errLDS_CV_Certificate_PrivateKey_Missing = int("-2130706070")

    errLDS_VDS_UnsupportedVersion = int("-2130705920")

    errLDS_VDS_Issuing_Country_Size = int("-2130705919")

    errLDS_VDS_Issuing_Country_IncorrectData = int("-2130705918")

    errLDS_VDS_Signer_Certificate_Size = int("-2130705917")

    errLDS_VDS_Signer_Certificate_Data = int("-2130705916")

    errLDS_VDS_Signature_IncorrectData = int("-2130705915")

    errLDS_VDS_NC_IncorrectData = int("-2130705664")

    errLDS_VDS_NC_MissingOrIncorrect_Data = int("-2130705663")

    errLDS_VDS_NC_MissingOrIncorrect_Header = int("-2130705662")

    errLDS_VDS_NC_MissingOrIncorrect_Type = int("-2130705661")

    errLDS_VDS_NC_MissingOrIncorrect_Version = int("-2130705660")

    errLDS_VDS_NC_MissingOrIncorrect_IssuingCountry = int("-2130705659")

    errLDS_VDS_NC_MissingOrIncorrect_Message = int("-2130705658")

    errLDS_VDS_NC_MissingOrIncorrect_Signature = int("-2130705657")

    errLDS_VDS_NC_MissingOrIncorrect_SigAlgorithm = int("-2130705656")

    errLDS_VDS_NC_MissingOrIncorrect_Certificate = int("-2130705655")

    errLDS_VDS_NC_MissingOrIncorrect_SigValue = int("-2130705654")

    allowable_values = [errLDS_Ok, errLDS_ASN_IncorrectData, errLDS_ASN_NotEnoughData, errLDS_ASN_Contents_UnexpectedData, errLDS_ASN_SignedData_IncorrectData, errLDS_ASN_SignedData_EncapContents_IncorrectData, errLDS_ASN_SignedData_Version_IncorrectData, errLDS_ASN_SignedData_DigestAlgorithms_IncorrectData, errLDS_ASN_LDSObject_IncorrectData, errLDS_ASN_LDSObject_Version_IncorrectData, errLDS_ASN_LDSObject_DigestAlgorithm_IncorrectData, errLDS_ASN_LDSObject_DGHashes_IncorrectData, errLDS_ASN_LDSObject_VersionInfo_IncorrectData, errLDS_ASN_Certificate_IncorrectData, errLDS_ASN_Certificate_Version_IncorrectData, errLDS_ASN_Certificate_SN_IncorrectData, errLDS_ASN_Certificate_Signature_IncorrectData, errLDS_ASN_Certificate_Issuer_IncorrectData, errLDS_ASN_Certificate_Validity_IncorrectData, errLDS_ASN_Certificate_Subject_IncorrectData, errLDS_ASN_Certificate_SubjectPK_IncorrectData, errLDS_ASN_Certificate_Extensions_IncorrectData, errLDS_ASN_SignerInfo_IncorrectData, errLDS_ASN_SignerInfo_Version_IncorrectData, errLDS_ASN_SignerInfo_SID_IncorrectData, errLDS_ASN_SignerInfo_DigestAlg_IncorrectData, errLDS_ASN_SignerInfo_SignedAttrs_IncorrectData, errLDS_ASN_SignerInfo_SignAlg_IncorrectData, errLDS_ASN_SignerInfo_Signature_IncorrectData, errLDS_ASN_SignerInfo_UnsignedAttrs_IncorrectData, errLDS_ICAO_LDSObject_UnsupportedDigestAlgorithm, errLDS_ICAO_SignedData_SignerInfos_Empty, errLDS_ICAO_SignerInfo_UnsupportedDigestAlgorithm, errLDS_ICAO_SignerInfo_UnsupportedSignatureAlgorithm, errLDS_ICAO_SignerInfo_MessageDigestError, errLDS_ICAO_SignerInfo_SignedAttrs_Missed, errLDS_Auth_SignerInfo_CantFindCertificate, errLDS_Auth_Error, errLDS_Auth_UnsupportedSignatureAlgorithm, errLDS_Auth_UnsupportedPublicKeyAlgorithm, errLDS_Auth_MessedAlgorithms, errLDS_Auth_PublicKeyDataInvalid, errLDS_Auth_AlgorithmParametersDataInvalid, errLDS_Auth_SignatureDataInvalid, errLDS_Auth_UnsupportedDigestAlgorithm, errLDS_Auth_SignatureDataIncorrect, errLDS_Auth_AlgorithmParametersNotDefined, errLDS_Auth_SignatureCheckFailed, errLDS_DG_WrongTag, errLDS_DG_Contents_UnexpectedData, errLDS_BAP_SymmetricCypher_CantInitialize, errLDS_PACE_Info_NotAvailable, errLDS_PACE_SymmetricCypher_CantInitialize, errLDS_PACE_KeyAgreement_CantInitialize, errLDS_PACE_EphemeralKeys_CantCreate, errLDS_PACE_Mapping_CantDecodeNonce, errLDS_PACE_SharedSecret_CantCreate, errLDS_PACE_DomainParams_UnsupportedFormat, errLDS_PACE_EphemeralKeys_Incorrect, errLDS_PACE_Mapping_EphemeralKeys_Incorrect, errLDS_PACE_Mapping_CantPerform, errLDS_PACE_NonMatchingAuthTokens, errLDS_PACE_CAM_Data_Incorrect, errLDS_PACE_CAM_Data_CantVerify, errLDS_PACE_CAM_Data_NonMatching, errLDS_PACE_IM_Scheme_Incorrect, errLDS_PACE_IM_RandomMapping_Failed, errLDS_CA_CantFindPublicKey, errLDS_CA_CantFindInfo, errLDS_CA_IncorrectVersion, errLDS_CA_CantFindDomainParameters, errLDS_CA_KeyAgreement_CantInitialize, errLDS_CA_PublicKey_UnsupportedAlgorithm, errLDS_CA_EphemeralKeys_CantCreate, errLDS_CA_SharedSecret_CantCreate, errLDS_CA_NonMatchingAuthTokens, errLDS_TA_IncorrectVersion, errLDS_TA_CantBuildCertificateChain, errLDS_TA_CantFindISPrivateKey, errLDS_TA_PublicKey_UnsupportedAlgorithm, errLDS_TA_SignatureBuildingError, errLDS_TA_InvalidKeyAlgorithmParameters, errLDS_AA_PublicKey_UnsupportedAlgorithm, errLDS_AA_PublicKey_IncorrectData, errLDS_AA_PublicKey_IncorrectParameters, errLDS_AA_PublicKey_UndefinedParameters, errLDS_AA_Signature_IncorrectData, errLDS_AA_UnsupportedRecoveryScheme, errLDS_AA_IncorrectTrailer, errLDS_AA_UnsupportedDigestAlgorithm, errLDS_RI_SectorKey_CantFind, errLDS_RI_SectorKey_IncorrectData, errLDS_RI_SectorKey_IncompleteData, errLDS_CV_Certificate_MissingMandatoryData_PK, errLDS_CV_Certificate_PublicKey_Unsupported, errLDS_CV_Certificate_CHAT_UnsupportedTerminalType, errLDS_CV_Certificate_PrivateKey_Unsupported, errLDS_CV_Certificate_PrivateKey_InvalidParams, errLDS_CV_Certificate_IncorrectData, errLDS_CV_Certificate_CPI_IncorrectData, errLDS_CV_Certificate_CAR_IncorrectData, errLDS_CV_Certificate_PublicKey_IncorrectData, errLDS_CV_Certificate_CHR_IncorrectData, errLDS_CV_Certificate_CHAT_IncorrectData, errLDS_CV_Certificate_ValidFrom_IncorrectData, errLDS_CV_Certificate_ValidTo_IncorrectData, errLDS_CV_Certificate_Extensions_IncorrectData, errLDS_CV_Certificate_PrivateKey_IncorrectData, errLDS_CV_Certificate_PrivateKey_Missing, errLDS_VDS_UnsupportedVersion, errLDS_VDS_Issuing_Country_Size, errLDS_VDS_Issuing_Country_IncorrectData, errLDS_VDS_Signer_Certificate_Size, errLDS_VDS_Signer_Certificate_Data, errLDS_VDS_Signature_IncorrectData, errLDS_VDS_NC_IncorrectData, errLDS_VDS_NC_MissingOrIncorrect_Data, errLDS_VDS_NC_MissingOrIncorrect_Header, errLDS_VDS_NC_MissingOrIncorrect_Type, errLDS_VDS_NC_MissingOrIncorrect_Version, errLDS_VDS_NC_MissingOrIncorrect_IssuingCountry, errLDS_VDS_NC_MissingOrIncorrect_Message, errLDS_VDS_NC_MissingOrIncorrect_Signature, errLDS_VDS_NC_MissingOrIncorrect_SigAlgorithm, errLDS_VDS_NC_MissingOrIncorrect_Certificate, errLDS_VDS_NC_MissingOrIncorrect_SigValue]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """ParsingErrorCodes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParsingErrorCodes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParsingErrorCodes):
            return True

        return self.to_dict() != other.to_dict()
