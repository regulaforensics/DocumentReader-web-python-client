# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
The enumeration contains error codes that can return during the RFID chip processing.
"""
class ParsingErrorCodes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    errLDS_Ok = int("1")

    errLDS_ASN_IncorrectData = int("2147483649")

    errLDS_ASN_NotEnoughData = int("2147483650")

    errLDS_ASN_Contents_UnexpectedData = int("2147483651")

    errLDS_ASN_SignedData_IncorrectData = int("2147483656")

    errLDS_ASN_SignedData_EncapContents_IncorrectData = int("2147483657")

    errLDS_ASN_SignedData_Version_IncorrectData = int("2147483658")

    errLDS_ASN_SignedData_DigestAlgorithms_IncorrectData = int("2147483665")

    errLDS_ASN_LDSObject_IncorrectData = int("2147483667")

    errLDS_ASN_LDSObject_Version_IncorrectData = int("2147483668")

    errLDS_ASN_LDSObject_DigestAlgorithm_IncorrectData = int("2147483669")

    errLDS_ASN_LDSObject_DGHashes_IncorrectData = int("2147483670")

    errLDS_ASN_LDSObject_VersionInfo_IncorrectData = int("2147483666")

    errLDS_ASN_Certificate_IncorrectData = int("2147483671")

    errLDS_ASN_Certificate_Version_IncorrectData = int("2147483672")

    errLDS_ASN_Certificate_SN_IncorrectData = int("2147483673")

    errLDS_ASN_Certificate_Signature_IncorrectData = int("2147483674")

    errLDS_ASN_Certificate_Issuer_IncorrectData = int("2147483675")

    errLDS_ASN_Certificate_Validity_IncorrectData = int("2147483676")

    errLDS_ASN_Certificate_Subject_IncorrectData = int("2147483677")

    errLDS_ASN_Certificate_SubjectPK_IncorrectData = int("2147483678")

    errLDS_ASN_Certificate_Extensions_IncorrectData = int("2147483679")

    errLDS_ASN_SignerInfo_IncorrectData = int("2147483680")

    errLDS_ASN_SignerInfo_Version_IncorrectData = int("2147483681")

    errLDS_ASN_SignerInfo_SID_IncorrectData = int("2147483682")

    errLDS_ASN_SignerInfo_DigestAlg_IncorrectData = int("2147483683")

    errLDS_ASN_SignerInfo_SignedAttrs_IncorrectData = int("2147483684")

    errLDS_ASN_SignerInfo_SignAlg_IncorrectData = int("2147483685")

    errLDS_ASN_SignerInfo_Signature_IncorrectData = int("2147483686")

    errLDS_ASN_SignerInfo_UnsignedAttrs_IncorrectData = int("2147483687")

    errLDS_ICAO_LDSObject_UnsupportedDigestAlgorithm = int("2147483696")

    errLDS_ICAO_SignedData_SignerInfos_Empty = int("2147483697")

    errLDS_ICAO_SignerInfo_UnsupportedDigestAlgorithm = int("2147483698")

    errLDS_ICAO_SignerInfo_UnsupportedSignatureAlgorithm = int("2147483699")

    errLDS_ICAO_SignerInfo_MessageDigestError = int("2147483700")

    errLDS_ICAO_SignerInfo_SignedAttrs_Missed = int("2147483702")

    errLDS_Auth_SignerInfo_CantFindCertificate = int("2147483701")

    errLDS_Auth_Error = int("2147483728")

    errLDS_Auth_UnsupportedSignatureAlgorithm = int("2147483729")

    errLDS_Auth_UnsupportedPublicKeyAlgorithm = int("2147483730")

    errLDS_Auth_MessedAlgorithms = int("2147483731")

    errLDS_Auth_PublicKeyDataInvalid = int("2147483732")

    errLDS_Auth_AlgorithmParametersDataInvalid = int("2147483733")

    errLDS_Auth_SignatureDataInvalid = int("2147483734")

    errLDS_Auth_UnsupportedDigestAlgorithm = int("2147483735")

    errLDS_Auth_SignatureDataIncorrect = int("2147483736")

    errLDS_Auth_AlgorithmParametersNotDefined = int("2147483737")

    errLDS_Auth_SignatureCheckFailed = int("2147483738")

    errLDS_DG_WrongTag = int("2147483760")

    errLDS_DG_Contents_UnexpectedData = int("2147483761")

    errLDS_BAP_SymmetricCypher_CantInitialize = int("2164260881")

    errLDS_PACE_Info_NotAvailable = int("2164260896")

    errLDS_PACE_SymmetricCypher_CantInitialize = int("2164260897")

    errLDS_PACE_KeyAgreement_CantInitialize = int("2164260898")

    errLDS_PACE_EphemeralKeys_CantCreate = int("2164260899")

    errLDS_PACE_Mapping_CantDecodeNonce = int("2164260900")

    errLDS_PACE_SharedSecret_CantCreate = int("2164260901")

    errLDS_PACE_DomainParams_UnsupportedFormat = int("2164260902")

    errLDS_PACE_EphemeralKeys_Incorrect = int("2164260903")

    errLDS_PACE_Mapping_EphemeralKeys_Incorrect = int("2164260904")

    errLDS_PACE_Mapping_CantPerform = int("2164260905")

    errLDS_PACE_NonMatchingAuthTokens = int("2164260906")

    errLDS_PACE_CAM_Data_Incorrect = int("2164260907")

    errLDS_PACE_CAM_Data_CantVerify = int("2164260908")

    errLDS_PACE_CAM_Data_NonMatching = int("2164260909")

    errLDS_PACE_IM_Scheme_Incorrect = int("2164260910")

    errLDS_PACE_IM_RandomMapping_Failed = int("2164260911")

    errLDS_CA_CantFindPublicKey = int("2164260912")

    errLDS_CA_CantFindInfo = int("2164260913")

    errLDS_CA_IncorrectVersion = int("2164260914")

    errLDS_CA_CantFindDomainParameters = int("2164260915")

    errLDS_CA_KeyAgreement_CantInitialize = int("2164260916")

    errLDS_CA_PublicKey_UnsupportedAlgorithm = int("2164260917")

    errLDS_CA_EphemeralKeys_CantCreate = int("2164260918")

    errLDS_CA_SharedSecret_CantCreate = int("2164260919")

    errLDS_CA_NonMatchingAuthTokens = int("2164260920")

    errLDS_TA_IncorrectVersion = int("2164260928")

    errLDS_TA_CantBuildCertificateChain = int("2164260929")

    errLDS_TA_CantFindISPrivateKey = int("2164260930")

    errLDS_TA_PublicKey_UnsupportedAlgorithm = int("2164260931")

    errLDS_TA_SignatureBuildingError = int("2164260932")

    errLDS_TA_InvalidKeyAlgorithmParameters = int("2164260933")

    errLDS_AA_PublicKey_UnsupportedAlgorithm = int("2164260944")

    errLDS_AA_PublicKey_IncorrectData = int("2164260945")

    errLDS_AA_PublicKey_IncorrectParameters = int("2164260946")

    errLDS_AA_PublicKey_UndefinedParameters = int("2164260947")

    errLDS_AA_Signature_IncorrectData = int("2164260948")

    errLDS_AA_UnsupportedRecoveryScheme = int("2164260949")

    errLDS_AA_IncorrectTrailer = int("2164260950")

    errLDS_AA_UnsupportedDigestAlgorithm = int("2164260951")

    errLDS_RI_SectorKey_CantFind = int("2164260976")

    errLDS_RI_SectorKey_IncorrectData = int("2164260977")

    errLDS_RI_SectorKey_IncompleteData = int("2164260978")

    errLDS_CV_Certificate_MissingMandatoryData_PK = int("2164260960")

    errLDS_CV_Certificate_PublicKey_Unsupported = int("2164260962")

    errLDS_CV_Certificate_CHAT_UnsupportedTerminalType = int("2164260963")

    errLDS_CV_Certificate_PrivateKey_Unsupported = int("2164260964")

    errLDS_CV_Certificate_PrivateKey_InvalidParams = int("2164260965")

    errLDS_CV_Certificate_IncorrectData = int("2164261216")

    errLDS_CV_Certificate_CPI_IncorrectData = int("2164261217")

    errLDS_CV_Certificate_CAR_IncorrectData = int("2164261218")

    errLDS_CV_Certificate_PublicKey_IncorrectData = int("2164261219")

    errLDS_CV_Certificate_CHR_IncorrectData = int("2164261220")

    errLDS_CV_Certificate_CHAT_IncorrectData = int("2164261221")

    errLDS_CV_Certificate_ValidFrom_IncorrectData = int("2164261222")

    errLDS_CV_Certificate_ValidTo_IncorrectData = int("2164261223")

    errLDS_CV_Certificate_Extensions_IncorrectData = int("2164261224")

    errLDS_CV_Certificate_PrivateKey_IncorrectData = int("2164261225")

    errLDS_CV_Certificate_PrivateKey_Missing = int("2164261226")

    errLDS_VDS_UnsupportedVersion = int("2164261376")

    errLDS_VDS_Issuing_Country_Size = int("2164261377")

    errLDS_VDS_Issuing_Country_IncorrectData = int("2164261378")

    errLDS_VDS_Signer_Certificate_Size = int("2164261379")

    errLDS_VDS_Signer_Certificate_Data = int("2164261380")

    errLDS_VDS_Signature_IncorrectData = int("2164261381")

    errLDS_VDS_NC_IncorrectData = int("2164261632")

    errLDS_VDS_NC_MissingOrIncorrect_Data = int("2164261633")

    errLDS_VDS_NC_MissingOrIncorrect_Header = int("2164261634")

    errLDS_VDS_NC_MissingOrIncorrect_Type = int("2164261635")

    errLDS_VDS_NC_MissingOrIncorrect_Version = int("2164261636")

    errLDS_VDS_NC_MissingOrIncorrect_IssuingCountry = int("2164261637")

    errLDS_VDS_NC_MissingOrIncorrect_Message = int("2164261638")

    errLDS_VDS_NC_MissingOrIncorrect_Signature = int("2164261639")

    errLDS_VDS_NC_MissingOrIncorrect_SigAlgorithm = int("2164261640")

    errLDS_VDS_NC_MissingOrIncorrect_Certificate = int("2164261641")

    errLDS_VDS_NC_MissingOrIncorrect_SigValue = int("2164261642")

    allowable_values = [errLDS_Ok, errLDS_ASN_IncorrectData, errLDS_ASN_NotEnoughData, errLDS_ASN_Contents_UnexpectedData, errLDS_ASN_SignedData_IncorrectData, errLDS_ASN_SignedData_EncapContents_IncorrectData, errLDS_ASN_SignedData_Version_IncorrectData, errLDS_ASN_SignedData_DigestAlgorithms_IncorrectData, errLDS_ASN_LDSObject_IncorrectData, errLDS_ASN_LDSObject_Version_IncorrectData, errLDS_ASN_LDSObject_DigestAlgorithm_IncorrectData, errLDS_ASN_LDSObject_DGHashes_IncorrectData, errLDS_ASN_LDSObject_VersionInfo_IncorrectData, errLDS_ASN_Certificate_IncorrectData, errLDS_ASN_Certificate_Version_IncorrectData, errLDS_ASN_Certificate_SN_IncorrectData, errLDS_ASN_Certificate_Signature_IncorrectData, errLDS_ASN_Certificate_Issuer_IncorrectData, errLDS_ASN_Certificate_Validity_IncorrectData, errLDS_ASN_Certificate_Subject_IncorrectData, errLDS_ASN_Certificate_SubjectPK_IncorrectData, errLDS_ASN_Certificate_Extensions_IncorrectData, errLDS_ASN_SignerInfo_IncorrectData, errLDS_ASN_SignerInfo_Version_IncorrectData, errLDS_ASN_SignerInfo_SID_IncorrectData, errLDS_ASN_SignerInfo_DigestAlg_IncorrectData, errLDS_ASN_SignerInfo_SignedAttrs_IncorrectData, errLDS_ASN_SignerInfo_SignAlg_IncorrectData, errLDS_ASN_SignerInfo_Signature_IncorrectData, errLDS_ASN_SignerInfo_UnsignedAttrs_IncorrectData, errLDS_ICAO_LDSObject_UnsupportedDigestAlgorithm, errLDS_ICAO_SignedData_SignerInfos_Empty, errLDS_ICAO_SignerInfo_UnsupportedDigestAlgorithm, errLDS_ICAO_SignerInfo_UnsupportedSignatureAlgorithm, errLDS_ICAO_SignerInfo_MessageDigestError, errLDS_ICAO_SignerInfo_SignedAttrs_Missed, errLDS_Auth_SignerInfo_CantFindCertificate, errLDS_Auth_Error, errLDS_Auth_UnsupportedSignatureAlgorithm, errLDS_Auth_UnsupportedPublicKeyAlgorithm, errLDS_Auth_MessedAlgorithms, errLDS_Auth_PublicKeyDataInvalid, errLDS_Auth_AlgorithmParametersDataInvalid, errLDS_Auth_SignatureDataInvalid, errLDS_Auth_UnsupportedDigestAlgorithm, errLDS_Auth_SignatureDataIncorrect, errLDS_Auth_AlgorithmParametersNotDefined, errLDS_Auth_SignatureCheckFailed, errLDS_DG_WrongTag, errLDS_DG_Contents_UnexpectedData, errLDS_BAP_SymmetricCypher_CantInitialize, errLDS_PACE_Info_NotAvailable, errLDS_PACE_SymmetricCypher_CantInitialize, errLDS_PACE_KeyAgreement_CantInitialize, errLDS_PACE_EphemeralKeys_CantCreate, errLDS_PACE_Mapping_CantDecodeNonce, errLDS_PACE_SharedSecret_CantCreate, errLDS_PACE_DomainParams_UnsupportedFormat, errLDS_PACE_EphemeralKeys_Incorrect, errLDS_PACE_Mapping_EphemeralKeys_Incorrect, errLDS_PACE_Mapping_CantPerform, errLDS_PACE_NonMatchingAuthTokens, errLDS_PACE_CAM_Data_Incorrect, errLDS_PACE_CAM_Data_CantVerify, errLDS_PACE_CAM_Data_NonMatching, errLDS_PACE_IM_Scheme_Incorrect, errLDS_PACE_IM_RandomMapping_Failed, errLDS_CA_CantFindPublicKey, errLDS_CA_CantFindInfo, errLDS_CA_IncorrectVersion, errLDS_CA_CantFindDomainParameters, errLDS_CA_KeyAgreement_CantInitialize, errLDS_CA_PublicKey_UnsupportedAlgorithm, errLDS_CA_EphemeralKeys_CantCreate, errLDS_CA_SharedSecret_CantCreate, errLDS_CA_NonMatchingAuthTokens, errLDS_TA_IncorrectVersion, errLDS_TA_CantBuildCertificateChain, errLDS_TA_CantFindISPrivateKey, errLDS_TA_PublicKey_UnsupportedAlgorithm, errLDS_TA_SignatureBuildingError, errLDS_TA_InvalidKeyAlgorithmParameters, errLDS_AA_PublicKey_UnsupportedAlgorithm, errLDS_AA_PublicKey_IncorrectData, errLDS_AA_PublicKey_IncorrectParameters, errLDS_AA_PublicKey_UndefinedParameters, errLDS_AA_Signature_IncorrectData, errLDS_AA_UnsupportedRecoveryScheme, errLDS_AA_IncorrectTrailer, errLDS_AA_UnsupportedDigestAlgorithm, errLDS_RI_SectorKey_CantFind, errLDS_RI_SectorKey_IncorrectData, errLDS_RI_SectorKey_IncompleteData, errLDS_CV_Certificate_MissingMandatoryData_PK, errLDS_CV_Certificate_PublicKey_Unsupported, errLDS_CV_Certificate_CHAT_UnsupportedTerminalType, errLDS_CV_Certificate_PrivateKey_Unsupported, errLDS_CV_Certificate_PrivateKey_InvalidParams, errLDS_CV_Certificate_IncorrectData, errLDS_CV_Certificate_CPI_IncorrectData, errLDS_CV_Certificate_CAR_IncorrectData, errLDS_CV_Certificate_PublicKey_IncorrectData, errLDS_CV_Certificate_CHR_IncorrectData, errLDS_CV_Certificate_CHAT_IncorrectData, errLDS_CV_Certificate_ValidFrom_IncorrectData, errLDS_CV_Certificate_ValidTo_IncorrectData, errLDS_CV_Certificate_Extensions_IncorrectData, errLDS_CV_Certificate_PrivateKey_IncorrectData, errLDS_CV_Certificate_PrivateKey_Missing, errLDS_VDS_UnsupportedVersion, errLDS_VDS_Issuing_Country_Size, errLDS_VDS_Issuing_Country_IncorrectData, errLDS_VDS_Signer_Certificate_Size, errLDS_VDS_Signer_Certificate_Data, errLDS_VDS_Signature_IncorrectData, errLDS_VDS_NC_IncorrectData, errLDS_VDS_NC_MissingOrIncorrect_Data, errLDS_VDS_NC_MissingOrIncorrect_Header, errLDS_VDS_NC_MissingOrIncorrect_Type, errLDS_VDS_NC_MissingOrIncorrect_Version, errLDS_VDS_NC_MissingOrIncorrect_IssuingCountry, errLDS_VDS_NC_MissingOrIncorrect_Message, errLDS_VDS_NC_MissingOrIncorrect_Signature, errLDS_VDS_NC_MissingOrIncorrect_SigAlgorithm, errLDS_VDS_NC_MissingOrIncorrect_Certificate, errLDS_VDS_NC_MissingOrIncorrect_SigValue]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """ParsingErrorCodes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParsingErrorCodes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParsingErrorCodes):
            return True

        return self.to_dict() != other.to_dict()
