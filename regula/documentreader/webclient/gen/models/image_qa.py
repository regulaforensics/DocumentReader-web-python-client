# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""

"""
class ImageQA(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dpi_threshold': 'int',
        'angle_threshold': 'int',
        'disable_focus_check': 'bool',
        'disable_glares_check': 'bool',
        'disable_colorness_check': 'bool',
        'disable_moire_check': 'bool'
    }

    attribute_map = {
        'dpi_threshold': 'dpiThreshold',
        'angle_threshold': 'angleThreshold',
        'disable_focus_check': 'disableFocusCheck',
        'disable_glares_check': 'disableGlaresCheck',
        'disable_colorness_check': 'disableColornessCheck',
        'disable_moire_check': 'disableMoireCheck'
    }

    def __init__(self, dpi_threshold=None, angle_threshold=None, disable_focus_check=None, disable_glares_check=None, disable_colorness_check=None, disable_moire_check=None, local_vars_configuration=None):  # noqa: E501
        """ImageQA - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dpi_threshold = None
        self._angle_threshold = None
        self._disable_focus_check = None
        self._disable_glares_check = None
        self._disable_colorness_check = None
        self._disable_moire_check = None
        self.discriminator = None

        if dpi_threshold is not None:
            self.dpi_threshold = dpi_threshold
        if angle_threshold is not None:
            self.angle_threshold = angle_threshold
        if disable_focus_check is not None:
            self.disable_focus_check = disable_focus_check
        if disable_glares_check is not None:
            self.disable_glares_check = disable_glares_check
        if disable_colorness_check is not None:
            self.disable_colorness_check = disable_colorness_check
        if disable_moire_check is not None:
            self.disable_moire_check = disable_moire_check

    @property
    def dpi_threshold(self):
        """Gets the dpi_threshold of this ImageQA.  # noqa: E501

        This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail.  # noqa: E501

        :return: The dpi_threshold of this ImageQA.  # noqa: E501
        :rtype: int
        """
        return self._dpi_threshold

    @dpi_threshold.setter
    def dpi_threshold(self, dpi_threshold):
        """Sets the dpi_threshold of this ImageQA.

        This parameter sets threshold for Image QA check of the presented document physical dpi. If actual document dpi is below this threshold, check will fail.  # noqa: E501

        :param dpi_threshold: The dpi_threshold of this ImageQA.  # noqa: E501
        :type dpi_threshold: int
        """

        self._dpi_threshold = dpi_threshold

    @property
    def angle_threshold(self):
        """Gets the angle_threshold of this ImageQA.  # noqa: E501

        This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail.  # noqa: E501

        :return: The angle_threshold of this ImageQA.  # noqa: E501
        :rtype: int
        """
        return self._angle_threshold

    @angle_threshold.setter
    def angle_threshold(self, angle_threshold):
        """Sets the angle_threshold of this ImageQA.

        This parameter sets threshold for Image QA check of the presented document perspective angle in degrees. If actual document perspective angle is above this threshold, check will fail.  # noqa: E501

        :param angle_threshold: The angle_threshold of this ImageQA.  # noqa: E501
        :type angle_threshold: int
        """

        self._angle_threshold = angle_threshold

    @property
    def disable_focus_check(self):
        """Gets the disable_focus_check of this ImageQA.  # noqa: E501

        This option disabled focus check during performing image quality validation  # noqa: E501

        :return: The disable_focus_check of this ImageQA.  # noqa: E501
        :rtype: bool
        """
        return self._disable_focus_check

    @disable_focus_check.setter
    def disable_focus_check(self, disable_focus_check):
        """Sets the disable_focus_check of this ImageQA.

        This option disabled focus check during performing image quality validation  # noqa: E501

        :param disable_focus_check: The disable_focus_check of this ImageQA.  # noqa: E501
        :type disable_focus_check: bool
        """

        self._disable_focus_check = disable_focus_check

    @property
    def disable_glares_check(self):
        """Gets the disable_glares_check of this ImageQA.  # noqa: E501

        This option disabled glares check during performing image quality validation  # noqa: E501

        :return: The disable_glares_check of this ImageQA.  # noqa: E501
        :rtype: bool
        """
        return self._disable_glares_check

    @disable_glares_check.setter
    def disable_glares_check(self, disable_glares_check):
        """Sets the disable_glares_check of this ImageQA.

        This option disabled glares check during performing image quality validation  # noqa: E501

        :param disable_glares_check: The disable_glares_check of this ImageQA.  # noqa: E501
        :type disable_glares_check: bool
        """

        self._disable_glares_check = disable_glares_check

    @property
    def disable_colorness_check(self):
        """Gets the disable_colorness_check of this ImageQA.  # noqa: E501

        This option disabled colorness check during performing image quality validation  # noqa: E501

        :return: The disable_colorness_check of this ImageQA.  # noqa: E501
        :rtype: bool
        """
        return self._disable_colorness_check

    @disable_colorness_check.setter
    def disable_colorness_check(self, disable_colorness_check):
        """Sets the disable_colorness_check of this ImageQA.

        This option disabled colorness check during performing image quality validation  # noqa: E501

        :param disable_colorness_check: The disable_colorness_check of this ImageQA.  # noqa: E501
        :type disable_colorness_check: bool
        """

        self._disable_colorness_check = disable_colorness_check

    @property
    def disable_moire_check(self):
        """Gets the disable_moire_check of this ImageQA.  # noqa: E501

        This option disabled moire patterns check during performing image quality validation  # noqa: E501

        :return: The disable_moire_check of this ImageQA.  # noqa: E501
        :rtype: bool
        """
        return self._disable_moire_check

    @disable_moire_check.setter
    def disable_moire_check(self, disable_moire_check):
        """Sets the disable_moire_check of this ImageQA.

        This option disabled moire patterns check during performing image quality validation  # noqa: E501

        :param disable_moire_check: The disable_moire_check of this ImageQA.  # noqa: E501
        :type disable_moire_check: bool
        """

        self._disable_moire_check = disable_moire_check

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageQA):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageQA):
            return True

        return self.to_dict() != other.to_dict()
