# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""

"""
class LivenessParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'check_ovi': 'bool',
        'check_mli': 'bool',
        'check_holo': 'bool',
        'check_ed': 'bool'
    }

    attribute_map = {
        'check_ovi': 'checkOVI',
        'check_mli': 'checkMLI',
        'check_holo': 'checkHolo',
        'check_ed': 'checkED'
    }

    def __init__(self, check_ovi=None, check_mli=None, check_holo=None, check_ed=None, local_vars_configuration=None):  # noqa: E501
        """LivenessParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._check_ovi = None
        self._check_mli = None
        self._check_holo = None
        self._check_ed = None
        self.discriminator = None

        if check_ovi is not None:
            self.check_ovi = check_ovi
        if check_mli is not None:
            self.check_mli = check_mli
        if check_holo is not None:
            self.check_holo = check_holo
        if check_ed is not None:
            self.check_ed = check_ed

    @property
    def check_ovi(self):
        """Gets the check_ovi of this LivenessParams.  # noqa: E501

        This parameter is used to enable OVI check  # noqa: E501

        :return: The check_ovi of this LivenessParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_ovi

    @check_ovi.setter
    def check_ovi(self, check_ovi):
        """Sets the check_ovi of this LivenessParams.

        This parameter is used to enable OVI check  # noqa: E501

        :param check_ovi: The check_ovi of this LivenessParams.  # noqa: E501
        :type check_ovi: bool
        """

        self._check_ovi = check_ovi

    @property
    def check_mli(self):
        """Gets the check_mli of this LivenessParams.  # noqa: E501

        This parameter is used to enable MLI check  # noqa: E501

        :return: The check_mli of this LivenessParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_mli

    @check_mli.setter
    def check_mli(self, check_mli):
        """Sets the check_mli of this LivenessParams.

        This parameter is used to enable MLI check  # noqa: E501

        :param check_mli: The check_mli of this LivenessParams.  # noqa: E501
        :type check_mli: bool
        """

        self._check_mli = check_mli

    @property
    def check_holo(self):
        """Gets the check_holo of this LivenessParams.  # noqa: E501

        This parameter is used to enable Hologram detection  # noqa: E501

        :return: The check_holo of this LivenessParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_holo

    @check_holo.setter
    def check_holo(self, check_holo):
        """Sets the check_holo of this LivenessParams.

        This parameter is used to enable Hologram detection  # noqa: E501

        :param check_holo: The check_holo of this LivenessParams.  # noqa: E501
        :type check_holo: bool
        """

        self._check_holo = check_holo

    @property
    def check_ed(self):
        """Gets the check_ed of this LivenessParams.  # noqa: E501

        This parameter is used to enable Electronic device detection  # noqa: E501

        :return: The check_ed of this LivenessParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_ed

    @check_ed.setter
    def check_ed(self, check_ed):
        """Sets the check_ed of this LivenessParams.

        This parameter is used to enable Electronic device detection  # noqa: E501

        :param check_ed: The check_ed of this LivenessParams.  # noqa: E501
        :type check_ed: bool
        """

        self._check_ed = check_ed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LivenessParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LivenessParams):
            return True

        return self.to_dict() != other.to_dict()
