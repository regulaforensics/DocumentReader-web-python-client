# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""

"""
class AuthParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'check_liveness': 'bool',
        'liveness_params': 'LivenessParams',
        'check_uv_luminiscence': 'bool',
        'check_irb900': 'bool',
        'check_image_patterns': 'bool',
        'check_fibers': 'bool',
        'check_ext_mrz': 'bool',
        'check_ext_ocr': 'bool',
        'check_axial': 'bool',
        'check_barcode_format': 'bool',
        'check_ir_visibility': 'bool',
        'check_ipi': 'bool',
        'check_photo_embedding': 'bool',
        'check_photo_comparison': 'bool',
        'check_letter_screen': 'bool'
    }

    attribute_map = {
        'check_liveness': 'checkLiveness',
        'liveness_params': 'livenessParams',
        'check_uv_luminiscence': 'checkUVLuminiscence',
        'check_irb900': 'checkIRB900',
        'check_image_patterns': 'checkImagePatterns',
        'check_fibers': 'checkFibers',
        'check_ext_mrz': 'checkExtMRZ',
        'check_ext_ocr': 'checkExtOCR',
        'check_axial': 'checkAxial',
        'check_barcode_format': 'checkBarcodeFormat',
        'check_ir_visibility': 'checkIRVisibility',
        'check_ipi': 'checkIPI',
        'check_photo_embedding': 'checkPhotoEmbedding',
        'check_photo_comparison': 'checkPhotoComparison',
        'check_letter_screen': 'checkLetterScreen'
    }

    def __init__(self, check_liveness=None, liveness_params=None, check_uv_luminiscence=None, check_irb900=None, check_image_patterns=None, check_fibers=None, check_ext_mrz=None, check_ext_ocr=None, check_axial=None, check_barcode_format=None, check_ir_visibility=None, check_ipi=None, check_photo_embedding=None, check_photo_comparison=None, check_letter_screen=None, local_vars_configuration=None):  # noqa: E501
        """AuthParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._check_liveness = None
        self._liveness_params = None
        self._check_uv_luminiscence = None
        self._check_irb900 = None
        self._check_image_patterns = None
        self._check_fibers = None
        self._check_ext_mrz = None
        self._check_ext_ocr = None
        self._check_axial = None
        self._check_barcode_format = None
        self._check_ir_visibility = None
        self._check_ipi = None
        self._check_photo_embedding = None
        self._check_photo_comparison = None
        self._check_letter_screen = None
        self.discriminator = None

        if check_liveness is not None:
            self.check_liveness = check_liveness
        if liveness_params is not None:
            self.liveness_params = liveness_params
        if check_uv_luminiscence is not None:
            self.check_uv_luminiscence = check_uv_luminiscence
        if check_irb900 is not None:
            self.check_irb900 = check_irb900
        if check_image_patterns is not None:
            self.check_image_patterns = check_image_patterns
        if check_fibers is not None:
            self.check_fibers = check_fibers
        if check_ext_mrz is not None:
            self.check_ext_mrz = check_ext_mrz
        if check_ext_ocr is not None:
            self.check_ext_ocr = check_ext_ocr
        if check_axial is not None:
            self.check_axial = check_axial
        if check_barcode_format is not None:
            self.check_barcode_format = check_barcode_format
        if check_ir_visibility is not None:
            self.check_ir_visibility = check_ir_visibility
        if check_ipi is not None:
            self.check_ipi = check_ipi
        if check_photo_embedding is not None:
            self.check_photo_embedding = check_photo_embedding
        if check_photo_comparison is not None:
            self.check_photo_comparison = check_photo_comparison
        if check_letter_screen is not None:
            self.check_letter_screen = check_letter_screen

    @property
    def check_liveness(self):
        """Gets the check_liveness of this AuthParams.  # noqa: E501

        This parameter is used to enable document liveness check  # noqa: E501

        :return: The check_liveness of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_liveness

    @check_liveness.setter
    def check_liveness(self, check_liveness):
        """Sets the check_liveness of this AuthParams.

        This parameter is used to enable document liveness check  # noqa: E501

        :param check_liveness: The check_liveness of this AuthParams.  # noqa: E501
        :type check_liveness: bool
        """

        self._check_liveness = check_liveness

    @property
    def liveness_params(self):
        """Gets the liveness_params of this AuthParams.  # noqa: E501


        :return: The liveness_params of this AuthParams.  # noqa: E501
        :rtype: LivenessParams
        """
        return self._liveness_params

    @liveness_params.setter
    def liveness_params(self, liveness_params):
        """Sets the liveness_params of this AuthParams.


        :param liveness_params: The liveness_params of this AuthParams.  # noqa: E501
        :type liveness_params: LivenessParams
        """

        self._liveness_params = liveness_params

    @property
    def check_uv_luminiscence(self):
        """Gets the check_uv_luminiscence of this AuthParams.  # noqa: E501

        This parameter is used to enable Document luminescence check in UV light  # noqa: E501

        :return: The check_uv_luminiscence of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_uv_luminiscence

    @check_uv_luminiscence.setter
    def check_uv_luminiscence(self, check_uv_luminiscence):
        """Sets the check_uv_luminiscence of this AuthParams.

        This parameter is used to enable Document luminescence check in UV light  # noqa: E501

        :param check_uv_luminiscence: The check_uv_luminiscence of this AuthParams.  # noqa: E501
        :type check_uv_luminiscence: bool
        """

        self._check_uv_luminiscence = check_uv_luminiscence

    @property
    def check_irb900(self):
        """Gets the check_irb900 of this AuthParams.  # noqa: E501

        This parameter is used to enable B900 ink MRZ contrast check in IR light  # noqa: E501

        :return: The check_irb900 of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_irb900

    @check_irb900.setter
    def check_irb900(self, check_irb900):
        """Sets the check_irb900 of this AuthParams.

        This parameter is used to enable B900 ink MRZ contrast check in IR light  # noqa: E501

        :param check_irb900: The check_irb900 of this AuthParams.  # noqa: E501
        :type check_irb900: bool
        """

        self._check_irb900 = check_irb900

    @property
    def check_image_patterns(self):
        """Gets the check_image_patterns of this AuthParams.  # noqa: E501

        This parameter is used to enable Image patterns presence/absence check (position, shape, color)  # noqa: E501

        :return: The check_image_patterns of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_image_patterns

    @check_image_patterns.setter
    def check_image_patterns(self, check_image_patterns):
        """Sets the check_image_patterns of this AuthParams.

        This parameter is used to enable Image patterns presence/absence check (position, shape, color)  # noqa: E501

        :param check_image_patterns: The check_image_patterns of this AuthParams.  # noqa: E501
        :type check_image_patterns: bool
        """

        self._check_image_patterns = check_image_patterns

    @property
    def check_fibers(self):
        """Gets the check_fibers of this AuthParams.  # noqa: E501

        This parameter is used to enable Fibers detection  # noqa: E501

        :return: The check_fibers of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_fibers

    @check_fibers.setter
    def check_fibers(self, check_fibers):
        """Sets the check_fibers of this AuthParams.

        This parameter is used to enable Fibers detection  # noqa: E501

        :param check_fibers: The check_fibers of this AuthParams.  # noqa: E501
        :type check_fibers: bool
        """

        self._check_fibers = check_fibers

    @property
    def check_ext_mrz(self):
        """Gets the check_ext_mrz of this AuthParams.  # noqa: E501

        This parameter is used to enable Extended MRZ Check  # noqa: E501

        :return: The check_ext_mrz of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_ext_mrz

    @check_ext_mrz.setter
    def check_ext_mrz(self, check_ext_mrz):
        """Sets the check_ext_mrz of this AuthParams.

        This parameter is used to enable Extended MRZ Check  # noqa: E501

        :param check_ext_mrz: The check_ext_mrz of this AuthParams.  # noqa: E501
        :type check_ext_mrz: bool
        """

        self._check_ext_mrz = check_ext_mrz

    @property
    def check_ext_ocr(self):
        """Gets the check_ext_ocr of this AuthParams.  # noqa: E501

        This parameter is used to enable Extended OCR Check  # noqa: E501

        :return: The check_ext_ocr of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_ext_ocr

    @check_ext_ocr.setter
    def check_ext_ocr(self, check_ext_ocr):
        """Sets the check_ext_ocr of this AuthParams.

        This parameter is used to enable Extended OCR Check  # noqa: E501

        :param check_ext_ocr: The check_ext_ocr of this AuthParams.  # noqa: E501
        :type check_ext_ocr: bool
        """

        self._check_ext_ocr = check_ext_ocr

    @property
    def check_axial(self):
        """Gets the check_axial of this AuthParams.  # noqa: E501

        This parameter is used to enable laminate integrity check in axial light  # noqa: E501

        :return: The check_axial of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_axial

    @check_axial.setter
    def check_axial(self, check_axial):
        """Sets the check_axial of this AuthParams.

        This parameter is used to enable laminate integrity check in axial light  # noqa: E501

        :param check_axial: The check_axial of this AuthParams.  # noqa: E501
        :type check_axial: bool
        """

        self._check_axial = check_axial

    @property
    def check_barcode_format(self):
        """Gets the check_barcode_format of this AuthParams.  # noqa: E501

        This parameter is used to enable Barcode format check (code metadata, data format, contents format, etc.)  # noqa: E501

        :return: The check_barcode_format of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_barcode_format

    @check_barcode_format.setter
    def check_barcode_format(self, check_barcode_format):
        """Sets the check_barcode_format of this AuthParams.

        This parameter is used to enable Barcode format check (code metadata, data format, contents format, etc.)  # noqa: E501

        :param check_barcode_format: The check_barcode_format of this AuthParams.  # noqa: E501
        :type check_barcode_format: bool
        """

        self._check_barcode_format = check_barcode_format

    @property
    def check_ir_visibility(self):
        """Gets the check_ir_visibility of this AuthParams.  # noqa: E501

        This parameter is used to enable Document elements visibility check in IR light  # noqa: E501

        :return: The check_ir_visibility of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_ir_visibility

    @check_ir_visibility.setter
    def check_ir_visibility(self, check_ir_visibility):
        """Sets the check_ir_visibility of this AuthParams.

        This parameter is used to enable Document elements visibility check in IR light  # noqa: E501

        :param check_ir_visibility: The check_ir_visibility of this AuthParams.  # noqa: E501
        :type check_ir_visibility: bool
        """

        self._check_ir_visibility = check_ir_visibility

    @property
    def check_ipi(self):
        """Gets the check_ipi of this AuthParams.  # noqa: E501

        This parameter is used to enable Invisible Personal Information (IPI) check  # noqa: E501

        :return: The check_ipi of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_ipi

    @check_ipi.setter
    def check_ipi(self, check_ipi):
        """Sets the check_ipi of this AuthParams.

        This parameter is used to enable Invisible Personal Information (IPI) check  # noqa: E501

        :param check_ipi: The check_ipi of this AuthParams.  # noqa: E501
        :type check_ipi: bool
        """

        self._check_ipi = check_ipi

    @property
    def check_photo_embedding(self):
        """Gets the check_photo_embedding of this AuthParams.  # noqa: E501

        This parameter is used to enable Owner's photo embedding check (is photo printed or sticked)  # noqa: E501

        :return: The check_photo_embedding of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_photo_embedding

    @check_photo_embedding.setter
    def check_photo_embedding(self, check_photo_embedding):
        """Sets the check_photo_embedding of this AuthParams.

        This parameter is used to enable Owner's photo embedding check (is photo printed or sticked)  # noqa: E501

        :param check_photo_embedding: The check_photo_embedding of this AuthParams.  # noqa: E501
        :type check_photo_embedding: bool
        """

        self._check_photo_embedding = check_photo_embedding

    @property
    def check_photo_comparison(self):
        """Gets the check_photo_comparison of this AuthParams.  # noqa: E501

        This parameter is used to enable Portrait comparison check  # noqa: E501

        :return: The check_photo_comparison of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_photo_comparison

    @check_photo_comparison.setter
    def check_photo_comparison(self, check_photo_comparison):
        """Sets the check_photo_comparison of this AuthParams.

        This parameter is used to enable Portrait comparison check  # noqa: E501

        :param check_photo_comparison: The check_photo_comparison of this AuthParams.  # noqa: E501
        :type check_photo_comparison: bool
        """

        self._check_photo_comparison = check_photo_comparison

    @property
    def check_letter_screen(self):
        """Gets the check_letter_screen of this AuthParams.  # noqa: E501

        This parameter is used to enable LetterScreen check  # noqa: E501

        :return: The check_letter_screen of this AuthParams.  # noqa: E501
        :rtype: bool
        """
        return self._check_letter_screen

    @check_letter_screen.setter
    def check_letter_screen(self, check_letter_screen):
        """Sets the check_letter_screen of this AuthParams.

        This parameter is used to enable LetterScreen check  # noqa: E501

        :param check_letter_screen: The check_letter_screen of this AuthParams.  # noqa: E501
        :type check_letter_screen: bool
        """

        self._check_letter_screen = check_letter_screen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthParams):
            return True

        return self.to_dict() != other.to_dict()
