# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Structure is used to store extended information about the characteristics of the RFID-chip located in the scope of the reader
"""
class RfidCardPropertiesExt(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'rfid_type': 'RfidType',
        'baudrate1': 'str',
        'baudrate2': 'str',
        'support_4': 'bool',
        'chip_type_a': 'RfidAChip',
        'support_mifare': 'bool',
        'mifare_memory': 'float',
        'uid': 'str',
        'atq_a': 'object',
        'sak': 'object',
        'atq_b': 'object',
        'bit_rate_s': 'RfidBaudRate',
        'bit_rate_r': 'RfidBaudRate',
        'atr': 'str'
    }

    attribute_map = {
        'rfid_type': 'RFID_Type',
        'baudrate1': 'Baudrate1',
        'baudrate2': 'Baudrate2',
        'support_4': 'Support_4',
        'chip_type_a': 'ChipType_A',
        'support_mifare': 'Support_Mifare',
        'mifare_memory': 'MifareMemory',
        'uid': 'UID',
        'atq_a': 'ATQ_A',
        'sak': 'SAK',
        'atq_b': 'ATQ_B',
        'bit_rate_s': 'BitRateS',
        'bit_rate_r': 'BitRateR',
        'atr': 'ATR'
    }

    def __init__(self, rfid_type=None, baudrate1=None, baudrate2=None, support_4=None, chip_type_a=None, support_mifare=None, mifare_memory=None, uid=None, atq_a=None, sak=None, atq_b=None, bit_rate_s=None, bit_rate_r=None, atr=None, local_vars_configuration=None):  # noqa: E501
        """RfidCardPropertiesExt - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._rfid_type = None
        self._baudrate1 = None
        self._baudrate2 = None
        self._support_4 = None
        self._chip_type_a = None
        self._support_mifare = None
        self._mifare_memory = None
        self._uid = None
        self._atq_a = None
        self._sak = None
        self._atq_b = None
        self._bit_rate_s = None
        self._bit_rate_r = None
        self._atr = None
        self.discriminator = None

        self.rfid_type = rfid_type
        self.baudrate1 = baudrate1
        self.baudrate2 = baudrate2
        self.support_4 = support_4
        self.chip_type_a = chip_type_a
        self.support_mifare = support_mifare
        self.mifare_memory = mifare_memory
        self.uid = uid
        self.atq_a = atq_a
        self.sak = sak
        self.atq_b = atq_b
        self.bit_rate_s = bit_rate_s
        self.bit_rate_r = bit_rate_r
        self.atr = atr

    @property
    def rfid_type(self):
        """Gets the rfid_type of this RfidCardPropertiesExt.  # noqa: E501


        :return: The rfid_type of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: RfidType
        """
        return self._rfid_type

    @rfid_type.setter
    def rfid_type(self, rfid_type):
        """Sets the rfid_type of this RfidCardPropertiesExt.


        :param rfid_type: The rfid_type of this RfidCardPropertiesExt.  # noqa: E501
        :type rfid_type: RfidType
        """
        if self.local_vars_configuration.client_side_validation and rfid_type is None:  # noqa: E501
            raise ValueError("Invalid value for `rfid_type`, must not be `None`")  # noqa: E501

        self._rfid_type = rfid_type

    @property
    def baudrate1(self):
        """Gets the baudrate1 of this RfidCardPropertiesExt.  # noqa: E501

        Numeric Baudrate1 value in hexadecimal format (e.g. 0x0000000F)  # noqa: E501

        :return: The baudrate1 of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: str
        """
        return self._baudrate1

    @baudrate1.setter
    def baudrate1(self, baudrate1):
        """Sets the baudrate1 of this RfidCardPropertiesExt.

        Numeric Baudrate1 value in hexadecimal format (e.g. 0x0000000F)  # noqa: E501

        :param baudrate1: The baudrate1 of this RfidCardPropertiesExt.  # noqa: E501
        :type baudrate1: str
        """
        if self.local_vars_configuration.client_side_validation and baudrate1 is None:  # noqa: E501
            raise ValueError("Invalid value for `baudrate1`, must not be `None`")  # noqa: E501

        self._baudrate1 = baudrate1

    @property
    def baudrate2(self):
        """Gets the baudrate2 of this RfidCardPropertiesExt.  # noqa: E501

        Numeric Baudrate2 value in hexadecimal format  # noqa: E501

        :return: The baudrate2 of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: str
        """
        return self._baudrate2

    @baudrate2.setter
    def baudrate2(self, baudrate2):
        """Sets the baudrate2 of this RfidCardPropertiesExt.

        Numeric Baudrate2 value in hexadecimal format  # noqa: E501

        :param baudrate2: The baudrate2 of this RfidCardPropertiesExt.  # noqa: E501
        :type baudrate2: str
        """
        if self.local_vars_configuration.client_side_validation and baudrate2 is None:  # noqa: E501
            raise ValueError("Invalid value for `baudrate2`, must not be `None`")  # noqa: E501

        self._baudrate2 = baudrate2

    @property
    def support_4(self):
        """Gets the support_4 of this RfidCardPropertiesExt.  # noqa: E501

        Boolean Support_4 value  # noqa: E501

        :return: The support_4 of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: bool
        """
        return self._support_4

    @support_4.setter
    def support_4(self, support_4):
        """Sets the support_4 of this RfidCardPropertiesExt.

        Boolean Support_4 value  # noqa: E501

        :param support_4: The support_4 of this RfidCardPropertiesExt.  # noqa: E501
        :type support_4: bool
        """
        if self.local_vars_configuration.client_side_validation and support_4 is None:  # noqa: E501
            raise ValueError("Invalid value for `support_4`, must not be `None`")  # noqa: E501

        self._support_4 = support_4

    @property
    def chip_type_a(self):
        """Gets the chip_type_a of this RfidCardPropertiesExt.  # noqa: E501


        :return: The chip_type_a of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: RfidAChip
        """
        return self._chip_type_a

    @chip_type_a.setter
    def chip_type_a(self, chip_type_a):
        """Sets the chip_type_a of this RfidCardPropertiesExt.


        :param chip_type_a: The chip_type_a of this RfidCardPropertiesExt.  # noqa: E501
        :type chip_type_a: RfidAChip
        """
        if self.local_vars_configuration.client_side_validation and chip_type_a is None:  # noqa: E501
            raise ValueError("Invalid value for `chip_type_a`, must not be `None`")  # noqa: E501

        self._chip_type_a = chip_type_a

    @property
    def support_mifare(self):
        """Gets the support_mifare of this RfidCardPropertiesExt.  # noqa: E501

        Sign of support for ISO/IEC 14443-3 data exchange protocol  # noqa: E501

        :return: The support_mifare of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: bool
        """
        return self._support_mifare

    @support_mifare.setter
    def support_mifare(self, support_mifare):
        """Sets the support_mifare of this RfidCardPropertiesExt.

        Sign of support for ISO/IEC 14443-3 data exchange protocol  # noqa: E501

        :param support_mifare: The support_mifare of this RfidCardPropertiesExt.  # noqa: E501
        :type support_mifare: bool
        """
        if self.local_vars_configuration.client_side_validation and support_mifare is None:  # noqa: E501
            raise ValueError("Invalid value for `support_mifare`, must not be `None`")  # noqa: E501

        self._support_mifare = support_mifare

    @property
    def mifare_memory(self):
        """Gets the mifare_memory of this RfidCardPropertiesExt.  # noqa: E501

        Amount of operational memory MIFARE® of the chip, kilobytes  # noqa: E501

        :return: The mifare_memory of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: float
        """
        return self._mifare_memory

    @mifare_memory.setter
    def mifare_memory(self, mifare_memory):
        """Sets the mifare_memory of this RfidCardPropertiesExt.

        Amount of operational memory MIFARE® of the chip, kilobytes  # noqa: E501

        :param mifare_memory: The mifare_memory of this RfidCardPropertiesExt.  # noqa: E501
        :type mifare_memory: float
        """
        if self.local_vars_configuration.client_side_validation and mifare_memory is None:  # noqa: E501
            raise ValueError("Invalid value for `mifare_memory`, must not be `None`")  # noqa: E501

        self._mifare_memory = mifare_memory

    @property
    def uid(self):
        """Gets the uid of this RfidCardPropertiesExt.  # noqa: E501

        UID contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. F9 4F 41 60)  # noqa: E501

        :return: The uid of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this RfidCardPropertiesExt.

        UID contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. F9 4F 41 60)  # noqa: E501

        :param uid: The uid of this RfidCardPropertiesExt.  # noqa: E501
        :type uid: str
        """
        if self.local_vars_configuration.client_side_validation and uid is None:  # noqa: E501
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def atq_a(self):
        """Gets the atq_a of this RfidCardPropertiesExt.  # noqa: E501

        Reply of the «A» type chip to «REQA» command of ISO/IEC 14443-3 protocol (Answer To Request, Type A – ATQA) – for the internal use by the main control library  # noqa: E501

        :return: The atq_a of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: object
        """
        return self._atq_a

    @atq_a.setter
    def atq_a(self, atq_a):
        """Sets the atq_a of this RfidCardPropertiesExt.

        Reply of the «A» type chip to «REQA» command of ISO/IEC 14443-3 protocol (Answer To Request, Type A – ATQA) – for the internal use by the main control library  # noqa: E501

        :param atq_a: The atq_a of this RfidCardPropertiesExt.  # noqa: E501
        :type atq_a: object
        """

        self._atq_a = atq_a

    @property
    def sak(self):
        """Gets the sak of this RfidCardPropertiesExt.  # noqa: E501

        Response of type-A RFID-chip to SELECT command of ISO/IEC 14443-3 protocol (Select Acknowledge, SAK).  # noqa: E501

        :return: The sak of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: object
        """
        return self._sak

    @sak.setter
    def sak(self, sak):
        """Sets the sak of this RfidCardPropertiesExt.

        Response of type-A RFID-chip to SELECT command of ISO/IEC 14443-3 protocol (Select Acknowledge, SAK).  # noqa: E501

        :param sak: The sak of this RfidCardPropertiesExt.  # noqa: E501
        :type sak: object
        """

        self._sak = sak

    @property
    def atq_b(self):
        """Gets the atq_b of this RfidCardPropertiesExt.  # noqa: E501

        ATQ_B contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 50 F9 4F 41 60 00 00 00 00 77 81 81)  # noqa: E501

        :return: The atq_b of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: object
        """
        return self._atq_b

    @atq_b.setter
    def atq_b(self, atq_b):
        """Sets the atq_b of this RfidCardPropertiesExt.

        ATQ_B contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 50 F9 4F 41 60 00 00 00 00 77 81 81)  # noqa: E501

        :param atq_b: The atq_b of this RfidCardPropertiesExt.  # noqa: E501
        :type atq_b: object
        """

        self._atq_b = atq_b

    @property
    def bit_rate_s(self):
        """Gets the bit_rate_s of this RfidCardPropertiesExt.  # noqa: E501


        :return: The bit_rate_s of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: RfidBaudRate
        """
        return self._bit_rate_s

    @bit_rate_s.setter
    def bit_rate_s(self, bit_rate_s):
        """Sets the bit_rate_s of this RfidCardPropertiesExt.


        :param bit_rate_s: The bit_rate_s of this RfidCardPropertiesExt.  # noqa: E501
        :type bit_rate_s: RfidBaudRate
        """
        if self.local_vars_configuration.client_side_validation and bit_rate_s is None:  # noqa: E501
            raise ValueError("Invalid value for `bit_rate_s`, must not be `None`")  # noqa: E501

        self._bit_rate_s = bit_rate_s

    @property
    def bit_rate_r(self):
        """Gets the bit_rate_r of this RfidCardPropertiesExt.  # noqa: E501


        :return: The bit_rate_r of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: RfidBaudRate
        """
        return self._bit_rate_r

    @bit_rate_r.setter
    def bit_rate_r(self, bit_rate_r):
        """Sets the bit_rate_r of this RfidCardPropertiesExt.


        :param bit_rate_r: The bit_rate_r of this RfidCardPropertiesExt.  # noqa: E501
        :type bit_rate_r: RfidBaudRate
        """
        if self.local_vars_configuration.client_side_validation and bit_rate_r is None:  # noqa: E501
            raise ValueError("Invalid value for `bit_rate_r`, must not be `None`")  # noqa: E501

        self._bit_rate_r = bit_rate_r

    @property
    def atr(self):
        """Gets the atr of this RfidCardPropertiesExt.  # noqa: E501

        ATR-string of RFID-chip  # noqa: E501

        :return: The atr of this RfidCardPropertiesExt.  # noqa: E501
        :rtype: str
        """
        return self._atr

    @atr.setter
    def atr(self, atr):
        """Sets the atr of this RfidCardPropertiesExt.

        ATR-string of RFID-chip  # noqa: E501

        :param atr: The atr of this RfidCardPropertiesExt.  # noqa: E501
        :type atr: str
        """
        if self.local_vars_configuration.client_side_validation and atr is None:  # noqa: E501
            raise ValueError("Invalid value for `atr`, must not be `None`")  # noqa: E501

        self._atr = atr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidCardPropertiesExt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidCardPropertiesExt):
            return True

        return self.to_dict() != other.to_dict()
