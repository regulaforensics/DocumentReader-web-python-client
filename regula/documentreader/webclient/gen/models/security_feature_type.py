# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class SecurityFeatureType(int, Enum):
    """
    Enumeration contains identifiers determining type of features for a document authenticity checks: https://docs.regulaforensics.com/develop/doc-reader-sdk/web-service/development/enums/security-feature-type/
    """

    """
    allowed enum values
    """
    BLANK = 0
    FILL = 1
    PHOTO = 2
    MRZ = 3
    FALSE_LUMINESCENCE = 4
    HOLO_SIMPLE = 5
    HOLO_VERIFY_STATIC = 6
    HOLO_VERIFY_MULTI_STATIC = 7
    HOLO_VERIFY_DYNAMIC = 8
    PATTERN_NOT_INTERRUPTED = 9
    PATTERN_NOT_SHIFTED = 10
    PATTERN_SAME_COLORS = 11
    PATTERN_IR_INVISIBLE = 12
    PHOTO_SIZE_CHECK = 13
    PORTRAIT_COMPARISON_VS_GHOST = 14
    PORTRAIT_COMPARISON_VS_RFID = 15
    PORTRAIT_COMPARISON_VS_VISUAL = 16
    BARCODE = 17
    PATTERN_DIFFERENT_LINES_THICKNESS = 18
    PORTRAIT_COMPARISON_VS_CAMERA = 19
    PORTRAIT_COMPARISON_RFID_VS_CAMERA = 20
    GHOST_PHOTO = 21
    CLEAR_GHOST_PHOTO = 22
    INVISIBLE_OBJECT = 23
    LOW_CONTRAST_OBJECT = 24
    PHOTO_COLOR = 25
    PHOTO_SHAPE = 26
    PHOTO_CORNERS = 27
    OCR = 28
    PORTRAIT_COMPARISON_EXT_VS_VISUAL = 29
    PORTRAIT_COMPARISON_EXT_VS_RFID = 30
    PORTRAIT_COMPARISON_EXT_VS_CAMERA = 31
    LIVENESS_DEPTH = 32
    MICRO_TEXT = 33
    FLUORESCENT_OBJECT = 34
    LANDMARK_CHECK = 35
    FACE_PRESENCE = 36
    FACE_ABSENCE = 38
    LIVENESS_SCREEN_CAPTURE = 39
    LIVENESS_ELECTRONIC_DEVICE = 40
    LIVENESS_OVI = 41
    BARCODE_SIZE_CHECK = 42
    LASINK = 43
    LIVENESS_MLI = 44
    LIVENESS_BARCODE_BACKGROUND = 45
    PORTRAIT_COMPARISON_VS_BARCODE = 46
    PORTRAIT_COMPARISON_RFID_VS_BARCODE = 47
    PORTRAIT_COMPARISON_EXT_VS_BARCODE = 48
    PORTRAIT_COMPARISON_BARCODE_VS_CAMERA = 49
    CHECK_DIGITAL_SIGNATURE = 50
    CONTACT_CHIP_CLASSIFICATION = 51
    HEAD_POSITION_CHECK = 52
    LIVENESS_BLACK_AND_WHITE_COPY_CHECK = 53

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SecurityFeatureType from a JSON string"""
        return cls(json.loads(json_str))


