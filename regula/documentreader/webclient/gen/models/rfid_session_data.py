# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Structure is used to describe the results of work with the SDK within the context of the current communication session with electronic document
"""
class RfidSessionData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'virtual_mode': 'object',
        'sdk_version': 'object',
        'driver_version': 'object',
        'firmware_version': 'object',
        'applications': 'list[RfidApplication]',
        'access_controls': 'list[RfidAccessControlInfo]',
        'card_properties': 'RfidCardPropertiesExt',
        'ext_le_support': 'RFIDErrorCodes',
        'process_time': 'float',
        'root_files': 'list[object]',
        'total_bytes_sent': 'float',
        'total_bytes_received': 'float',
        'session_key': 'RfidAccessKey',
        'session_terminal': 'RfidTerminal',
        'session_procedure': 'RfidAuthenticationProcedureType',
        'security_objects': 'list[RfidSecurityObject]'
    }

    attribute_map = {
        'virtual_mode': 'VirtualMode',
        'sdk_version': 'SDKVersion',
        'driver_version': 'DriverVersion',
        'firmware_version': 'FirmwareVersion',
        'applications': 'Applications',
        'access_controls': 'AccessControls',
        'card_properties': 'CardProperties',
        'ext_le_support': 'ExtLeSupport',
        'process_time': 'ProcessTime',
        'root_files': 'RootFiles',
        'total_bytes_sent': 'TotalBytesSent',
        'total_bytes_received': 'TotalBytesReceived',
        'session_key': 'Session_key',
        'session_terminal': 'Session_terminal',
        'session_procedure': 'Session_procedure',
        'security_objects': 'SecurityObjects'
    }

    def __init__(self, virtual_mode=None, sdk_version=None, driver_version=None, firmware_version=None, applications=None, access_controls=None, card_properties=None, ext_le_support=None, process_time=None, root_files=None, total_bytes_sent=None, total_bytes_received=None, session_key=None, session_terminal=None, session_procedure=None, security_objects=None, local_vars_configuration=None):  # noqa: E501
        """RfidSessionData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._virtual_mode = None
        self._sdk_version = None
        self._driver_version = None
        self._firmware_version = None
        self._applications = None
        self._access_controls = None
        self._card_properties = None
        self._ext_le_support = None
        self._process_time = None
        self._root_files = None
        self._total_bytes_sent = None
        self._total_bytes_received = None
        self._session_key = None
        self._session_terminal = None
        self._session_procedure = None
        self._security_objects = None
        self.discriminator = None

        self.virtual_mode = virtual_mode
        self.sdk_version = sdk_version
        self.driver_version = driver_version
        self.firmware_version = firmware_version
        self.applications = applications
        self.access_controls = access_controls
        self.card_properties = card_properties
        self.ext_le_support = ext_le_support
        self.process_time = process_time
        self.root_files = root_files
        self.total_bytes_sent = total_bytes_sent
        self.total_bytes_received = total_bytes_received
        self.session_key = session_key
        self.session_terminal = session_terminal
        self.session_procedure = session_procedure
        self.security_objects = security_objects

    @property
    def virtual_mode(self):
        """Gets the virtual_mode of this RfidSessionData.  # noqa: E501

        Sign of virtual session when working with loaded data from a previous communication session with the electronic document  # noqa: E501

        :return: The virtual_mode of this RfidSessionData.  # noqa: E501
        :rtype: object
        """
        return self._virtual_mode

    @virtual_mode.setter
    def virtual_mode(self, virtual_mode):
        """Sets the virtual_mode of this RfidSessionData.

        Sign of virtual session when working with loaded data from a previous communication session with the electronic document  # noqa: E501

        :param virtual_mode: The virtual_mode of this RfidSessionData.  # noqa: E501
        :type virtual_mode: object
        """

        self._virtual_mode = virtual_mode

    @property
    def sdk_version(self):
        """Gets the sdk_version of this RfidSessionData.  # noqa: E501

        Text SDKVersion value in format A.B (e.g. 3.1)  # noqa: E501

        :return: The sdk_version of this RfidSessionData.  # noqa: E501
        :rtype: object
        """
        return self._sdk_version

    @sdk_version.setter
    def sdk_version(self, sdk_version):
        """Sets the sdk_version of this RfidSessionData.

        Text SDKVersion value in format A.B (e.g. 3.1)  # noqa: E501

        :param sdk_version: The sdk_version of this RfidSessionData.  # noqa: E501
        :type sdk_version: object
        """

        self._sdk_version = sdk_version

    @property
    def driver_version(self):
        """Gets the driver_version of this RfidSessionData.  # noqa: E501

        Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4)  # noqa: E501

        :return: The driver_version of this RfidSessionData.  # noqa: E501
        :rtype: object
        """
        return self._driver_version

    @driver_version.setter
    def driver_version(self, driver_version):
        """Sets the driver_version of this RfidSessionData.

        Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4)  # noqa: E501

        :param driver_version: The driver_version of this RfidSessionData.  # noqa: E501
        :type driver_version: object
        """

        self._driver_version = driver_version

    @property
    def firmware_version(self):
        """Gets the firmware_version of this RfidSessionData.  # noqa: E501

        Text FirmwareVersion value in format A.B (e.g. 5.19)  # noqa: E501

        :return: The firmware_version of this RfidSessionData.  # noqa: E501
        :rtype: object
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this RfidSessionData.

        Text FirmwareVersion value in format A.B (e.g. 5.19)  # noqa: E501

        :param firmware_version: The firmware_version of this RfidSessionData.  # noqa: E501
        :type firmware_version: object
        """

        self._firmware_version = firmware_version

    @property
    def applications(self):
        """Gets the applications of this RfidSessionData.  # noqa: E501

        List of containers to store information about the involved applications of electronic document  # noqa: E501

        :return: The applications of this RfidSessionData.  # noqa: E501
        :rtype: list[RfidApplication]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this RfidSessionData.

        List of containers to store information about the involved applications of electronic document  # noqa: E501

        :param applications: The applications of this RfidSessionData.  # noqa: E501
        :type applications: list[RfidApplication]
        """

        self._applications = applications

    @property
    def access_controls(self):
        """Gets the access_controls of this RfidSessionData.  # noqa: E501

        List of containers to store information about the supported procedures of authentication and secure data access within the context of the session  # noqa: E501

        :return: The access_controls of this RfidSessionData.  # noqa: E501
        :rtype: list[RfidAccessControlInfo]
        """
        return self._access_controls

    @access_controls.setter
    def access_controls(self, access_controls):
        """Sets the access_controls of this RfidSessionData.

        List of containers to store information about the supported procedures of authentication and secure data access within the context of the session  # noqa: E501

        :param access_controls: The access_controls of this RfidSessionData.  # noqa: E501
        :type access_controls: list[RfidAccessControlInfo]
        """

        self._access_controls = access_controls

    @property
    def card_properties(self):
        """Gets the card_properties of this RfidSessionData.  # noqa: E501


        :return: The card_properties of this RfidSessionData.  # noqa: E501
        :rtype: RfidCardPropertiesExt
        """
        return self._card_properties

    @card_properties.setter
    def card_properties(self, card_properties):
        """Sets the card_properties of this RfidSessionData.


        :param card_properties: The card_properties of this RfidSessionData.  # noqa: E501
        :type card_properties: RfidCardPropertiesExt
        """

        self._card_properties = card_properties

    @property
    def ext_le_support(self):
        """Gets the ext_le_support of this RfidSessionData.  # noqa: E501


        :return: The ext_le_support of this RfidSessionData.  # noqa: E501
        :rtype: RFIDErrorCodes
        """
        return self._ext_le_support

    @ext_le_support.setter
    def ext_le_support(self, ext_le_support):
        """Sets the ext_le_support of this RfidSessionData.


        :param ext_le_support: The ext_le_support of this RfidSessionData.  # noqa: E501
        :type ext_le_support: RFIDErrorCodes
        """

        self._ext_le_support = ext_le_support

    @property
    def process_time(self):
        """Gets the process_time of this RfidSessionData.  # noqa: E501

        Time of processing, milliseconds  # noqa: E501

        :return: The process_time of this RfidSessionData.  # noqa: E501
        :rtype: float
        """
        return self._process_time

    @process_time.setter
    def process_time(self, process_time):
        """Sets the process_time of this RfidSessionData.

        Time of processing, milliseconds  # noqa: E501

        :param process_time: The process_time of this RfidSessionData.  # noqa: E501
        :type process_time: float
        """

        self._process_time = process_time

    @property
    def root_files(self):
        """Gets the root_files of this RfidSessionData.  # noqa: E501

        List of containers to store information about the read files of the root Master File  # noqa: E501

        :return: The root_files of this RfidSessionData.  # noqa: E501
        :rtype: list[object]
        """
        return self._root_files

    @root_files.setter
    def root_files(self, root_files):
        """Sets the root_files of this RfidSessionData.

        List of containers to store information about the read files of the root Master File  # noqa: E501

        :param root_files: The root_files of this RfidSessionData.  # noqa: E501
        :type root_files: list[object]
        """

        self._root_files = root_files

    @property
    def total_bytes_sent(self):
        """Gets the total_bytes_sent of this RfidSessionData.  # noqa: E501

        Total number of bytes transmitted to the RFID-chip during the whole session  # noqa: E501

        :return: The total_bytes_sent of this RfidSessionData.  # noqa: E501
        :rtype: float
        """
        return self._total_bytes_sent

    @total_bytes_sent.setter
    def total_bytes_sent(self, total_bytes_sent):
        """Sets the total_bytes_sent of this RfidSessionData.

        Total number of bytes transmitted to the RFID-chip during the whole session  # noqa: E501

        :param total_bytes_sent: The total_bytes_sent of this RfidSessionData.  # noqa: E501
        :type total_bytes_sent: float
        """

        self._total_bytes_sent = total_bytes_sent

    @property
    def total_bytes_received(self):
        """Gets the total_bytes_received of this RfidSessionData.  # noqa: E501

        Total number of bytes received from the RFID-chip during the whole session  # noqa: E501

        :return: The total_bytes_received of this RfidSessionData.  # noqa: E501
        :rtype: float
        """
        return self._total_bytes_received

    @total_bytes_received.setter
    def total_bytes_received(self, total_bytes_received):
        """Sets the total_bytes_received of this RfidSessionData.

        Total number of bytes received from the RFID-chip during the whole session  # noqa: E501

        :param total_bytes_received: The total_bytes_received of this RfidSessionData.  # noqa: E501
        :type total_bytes_received: float
        """

        self._total_bytes_received = total_bytes_received

    @property
    def session_key(self):
        """Gets the session_key of this RfidSessionData.  # noqa: E501


        :return: The session_key of this RfidSessionData.  # noqa: E501
        :rtype: RfidAccessKey
        """
        return self._session_key

    @session_key.setter
    def session_key(self, session_key):
        """Sets the session_key of this RfidSessionData.


        :param session_key: The session_key of this RfidSessionData.  # noqa: E501
        :type session_key: RfidAccessKey
        """

        self._session_key = session_key

    @property
    def session_terminal(self):
        """Gets the session_terminal of this RfidSessionData.  # noqa: E501


        :return: The session_terminal of this RfidSessionData.  # noqa: E501
        :rtype: RfidTerminal
        """
        return self._session_terminal

    @session_terminal.setter
    def session_terminal(self, session_terminal):
        """Sets the session_terminal of this RfidSessionData.


        :param session_terminal: The session_terminal of this RfidSessionData.  # noqa: E501
        :type session_terminal: RfidTerminal
        """

        self._session_terminal = session_terminal

    @property
    def session_procedure(self):
        """Gets the session_procedure of this RfidSessionData.  # noqa: E501


        :return: The session_procedure of this RfidSessionData.  # noqa: E501
        :rtype: RfidAuthenticationProcedureType
        """
        return self._session_procedure

    @session_procedure.setter
    def session_procedure(self, session_procedure):
        """Sets the session_procedure of this RfidSessionData.


        :param session_procedure: The session_procedure of this RfidSessionData.  # noqa: E501
        :type session_procedure: RfidAuthenticationProcedureType
        """

        self._session_procedure = session_procedure

    @property
    def security_objects(self):
        """Gets the security_objects of this RfidSessionData.  # noqa: E501

        List of containers to store information about the detected document security objects  # noqa: E501

        :return: The security_objects of this RfidSessionData.  # noqa: E501
        :rtype: list[RfidSecurityObject]
        """
        return self._security_objects

    @security_objects.setter
    def security_objects(self, security_objects):
        """Sets the security_objects of this RfidSessionData.

        List of containers to store information about the detected document security objects  # noqa: E501

        :param security_objects: The security_objects of this RfidSessionData.  # noqa: E501
        :type security_objects: list[RfidSecurityObject]
        """

        self._security_objects = security_objects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidSessionData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidSessionData):
            return True

        return self.to_dict() != other.to_dict()
