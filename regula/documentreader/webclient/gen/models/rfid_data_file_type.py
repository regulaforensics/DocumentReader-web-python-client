# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Enumeration contains a set of constants that define the file type (or logical belonging of the data object) within the context of the communication session with electronic document
"""
class RfidDataFileType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    UNSPECIFIED = int("0")

    PASSPORT_DG1 = int("1")

    PASSPORT_DG2 = int("2")

    PASSPORT_DG3 = int("3")

    PASSPORT_DG4 = int("4")

    PASSPORT_DG5 = int("5")

    PASSPORT_DG6 = int("6")

    PASSPORT_DG7 = int("7")

    PASSPORT_DG8 = int("8")

    PASSPORT_DG9 = int("9")

    PASSPORT_DG10 = int("10")

    PASSPORT_DG11 = int("11")

    PASSPORT_DG12 = int("12")

    PASSPORT_DG13 = int("13")

    PASSPORT_DG14 = int("14")

    PASSPORT_DG15 = int("15")

    PASSPORT_DG16 = int("16")

    PASSPORT_DG17 = int("17")

    PASSPORT_DG18 = int("18")

    PASSPORT_DG19 = int("19")

    PASSPORT_DG20 = int("20")

    PASSPORT_SOD = int("21")

    PASSPORT_CVCA = int("22")

    PASSPORT_COM = int("23")

    ID_DG1 = int("101")

    ID_DG2 = int("102")

    ID_DG3 = int("103")

    ID_DG4 = int("104")

    ID_DG5 = int("105")

    ID_DG6 = int("106")

    ID_DG7 = int("107")

    ID_DG8 = int("108")

    ID_DG9 = int("109")

    ID_DG10 = int("110")

    ID_DG11 = int("111")

    ID_DG12 = int("112")

    ID_DG13 = int("113")

    ID_DG14 = int("114")

    ID_DG15 = int("115")

    ID_DG16 = int("116")

    ID_DG17 = int("117")

    ID_DG18 = int("118")

    ID_DG19 = int("119")

    ID_DG20 = int("120")

    ID_DG21 = int("121")

    DL_COM = int("150")

    DL_DG1 = int("151")

    DL_DG2 = int("152")

    DL_DG3 = int("153")

    DL_DG4 = int("154")

    DL_DG5 = int("155")

    DL_DG6 = int("156")

    DL_DG7 = int("157")

    DL_DG8 = int("158")

    DL_DG9 = int("159")

    DL_DG10 = int("160")

    DL_DG11 = int("161")

    DL_DG12 = int("162")

    DL_DG13 = int("163")

    DL_DG14 = int("164")

    DL_SOD = int("165")

    DL_CE = int("166")

    DL_CVCA = int("167")

    PACE_CARD_ACCESS = int("200")

    PACE_CARD_SECURITY = int("201")

    PACE_CHIP_SECURITY = int("202")

    MIFARE_DATA = int("300")

    MIFARE_VALIDITY = int("301")

    AUTHENTICITY_V2 = int("302")

    ATR = int("400")

    _E_SIGN_PK = int("500")

    _E_SIGN_SIGNED_DATA = int("501")

    CERTIFICATE = int("600")

    MASTER_LIST = int("601")

    DEFECT_LIST = int("602")

    BLACK_LIST = int("603")

    APP_DIRECTORY = int("700")

    SESSION = int("701")

    LOG_DATA = int("702")

    CHIP_PROPERTIES = int("703")

    POST_CA_RESPONSE = int("710")

    POST_CA_PUBLIC_KEY = int("711")

    POST_CA_INFO = int("712")

    POST_CA_D_PARAMS = int("713")

    POST_CA_CHECK_PK = int("714")

    POST_CA_CHECK_SK = int("715")

    USER_DEFINED = int("1000")

    allowable_values = [UNSPECIFIED, PASSPORT_DG1, PASSPORT_DG2, PASSPORT_DG3, PASSPORT_DG4, PASSPORT_DG5, PASSPORT_DG6, PASSPORT_DG7, PASSPORT_DG8, PASSPORT_DG9, PASSPORT_DG10, PASSPORT_DG11, PASSPORT_DG12, PASSPORT_DG13, PASSPORT_DG14, PASSPORT_DG15, PASSPORT_DG16, PASSPORT_DG17, PASSPORT_DG18, PASSPORT_DG19, PASSPORT_DG20, PASSPORT_SOD, PASSPORT_CVCA, PASSPORT_COM, ID_DG1, ID_DG2, ID_DG3, ID_DG4, ID_DG5, ID_DG6, ID_DG7, ID_DG8, ID_DG9, ID_DG10, ID_DG11, ID_DG12, ID_DG13, ID_DG14, ID_DG15, ID_DG16, ID_DG17, ID_DG18, ID_DG19, ID_DG20, ID_DG21, DL_COM, DL_DG1, DL_DG2, DL_DG3, DL_DG4, DL_DG5, DL_DG6, DL_DG7, DL_DG8, DL_DG9, DL_DG10, DL_DG11, DL_DG12, DL_DG13, DL_DG14, DL_SOD, DL_CE, DL_CVCA, PACE_CARD_ACCESS, PACE_CARD_SECURITY, PACE_CHIP_SECURITY, MIFARE_DATA, MIFARE_VALIDITY, AUTHENTICITY_V2, ATR, _E_SIGN_PK, _E_SIGN_SIGNED_DATA, CERTIFICATE, MASTER_LIST, DEFECT_LIST, BLACK_LIST, APP_DIRECTORY, SESSION, LOG_DATA, CHIP_PROPERTIES, POST_CA_RESPONSE, POST_CA_PUBLIC_KEY, POST_CA_INFO, POST_CA_D_PARAMS, POST_CA_CHECK_PK, POST_CA_CHECK_SK, USER_DEFINED]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """RfidDataFileType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidDataFileType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidDataFileType):
            return True

        return self.to_dict() != other.to_dict()
