# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Structure is used to describe the contents of a single document security object (SO) and the results of its check within the context of the communication session with electronic document
"""
class RfidSecurityObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'float',
        'object_type': 'str',
        'file_reference': 'float',
        'notifications': 'list[ParsingErrorCodes]',
        'signer_infos': 'list[RfidSignerInfoEx]'
    }

    attribute_map = {
        'version': 'Version',
        'object_type': 'ObjectType',
        'file_reference': 'FileReference',
        'notifications': 'Notifications',
        'signer_infos': 'SignerInfos'
    }

    def __init__(self, version=None, object_type=None, file_reference=None, notifications=None, signer_infos=None, local_vars_configuration=None):  # noqa: E501
        """RfidSecurityObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._object_type = None
        self._file_reference = None
        self._notifications = None
        self._signer_infos = None
        self.discriminator = None

        self.version = version
        self.object_type = object_type
        self.file_reference = file_reference
        self.notifications = notifications
        self.signer_infos = signer_infos

    @property
    def version(self):
        """Gets the version of this RfidSecurityObject.  # noqa: E501

        Security object version  # noqa: E501

        :return: The version of this RfidSecurityObject.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RfidSecurityObject.

        Security object version  # noqa: E501

        :param version: The version of this RfidSecurityObject.  # noqa: E501
        :type version: float
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def object_type(self):
        """Gets the object_type of this RfidSecurityObject.  # noqa: E501

        Identifier of the security object  # noqa: E501

        :return: The object_type of this RfidSecurityObject.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this RfidSecurityObject.

        Identifier of the security object  # noqa: E501

        :param object_type: The object_type of this RfidSecurityObject.  # noqa: E501
        :type object_type: str
        """
        if self.local_vars_configuration.client_side_validation and object_type is None:  # noqa: E501
            raise ValueError("Invalid value for `object_type`, must not be `None`")  # noqa: E501

        self._object_type = object_type

    @property
    def file_reference(self):
        """Gets the file_reference of this RfidSecurityObject.  # noqa: E501

        Reference to the source file of the security object data  # noqa: E501

        :return: The file_reference of this RfidSecurityObject.  # noqa: E501
        :rtype: float
        """
        return self._file_reference

    @file_reference.setter
    def file_reference(self, file_reference):
        """Sets the file_reference of this RfidSecurityObject.

        Reference to the source file of the security object data  # noqa: E501

        :param file_reference: The file_reference of this RfidSecurityObject.  # noqa: E501
        :type file_reference: float
        """
        if self.local_vars_configuration.client_side_validation and file_reference is None:  # noqa: E501
            raise ValueError("Invalid value for `file_reference`, must not be `None`")  # noqa: E501

        self._file_reference = file_reference

    @property
    def notifications(self):
        """Gets the notifications of this RfidSecurityObject.  # noqa: E501

        List of remarks arisen during the analysis of SO data structure.  # noqa: E501

        :return: The notifications of this RfidSecurityObject.  # noqa: E501
        :rtype: list[ParsingErrorCodes]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this RfidSecurityObject.

        List of remarks arisen during the analysis of SO data structure.  # noqa: E501

        :param notifications: The notifications of this RfidSecurityObject.  # noqa: E501
        :type notifications: list[ParsingErrorCodes]
        """
        if self.local_vars_configuration.client_side_validation and notifications is None:  # noqa: E501
            raise ValueError("Invalid value for `notifications`, must not be `None`")  # noqa: E501

        self._notifications = notifications

    @property
    def signer_infos(self):
        """Gets the signer_infos of this RfidSecurityObject.  # noqa: E501

        List of containers to store information about digital signature objects contained in the SO  # noqa: E501

        :return: The signer_infos of this RfidSecurityObject.  # noqa: E501
        :rtype: list[RfidSignerInfoEx]
        """
        return self._signer_infos

    @signer_infos.setter
    def signer_infos(self, signer_infos):
        """Sets the signer_infos of this RfidSecurityObject.

        List of containers to store information about digital signature objects contained in the SO  # noqa: E501

        :param signer_infos: The signer_infos of this RfidSecurityObject.  # noqa: E501
        :type signer_infos: list[RfidSignerInfoEx]
        """
        if self.local_vars_configuration.client_side_validation and signer_infos is None:  # noqa: E501
            raise ValueError("Invalid value for `signer_infos`, must not be `None`")  # noqa: E501

        self._signer_infos = signer_infos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidSecurityObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidSecurityObject):
            return True

        return self.to_dict() != other.to_dict()
