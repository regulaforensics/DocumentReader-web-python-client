# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from regula.documentreader.webclient.gen.models.graphic_field import GraphicField
from regula.documentreader.webclient.gen.models.graphic_field_type import GraphicFieldType
from regula.documentreader.webclient.gen.models.image_data import ImageData
from regula.documentreader.webclient.gen.models.rfid_data_group_type_tag import RfidDataGroupTypeTag
from typing import Optional, Set
from typing_extensions import Self

class GraphicFieldRfid(GraphicField):
    """
    Information about one graphic field, which is a RFID
    """ # noqa: E501
    rfid_origin_dg: RfidDataGroupTypeTag = Field(alias="RFID_OriginDG")
    rfid_origin_dg_tag: StrictInt = Field(description="Index of the source record of the image with biometric information in the information data group. Only for Result.RFID_GRAPHICS result.", alias="RFID_OriginDGTag")
    rfid_origin_tag_entry: StrictInt = Field(description="Index of the template in the record with biometric data. Only for Result.RFID_GRAPHICS result.", alias="RFID_OriginTagEntry")
    rfid_origin_entry_view: StrictInt = Field(description="Index of the variant of the biometric data template. Only for Result.RFID_GRAPHICS result.", alias="RFID_OriginEntryView")
    __properties: ClassVar[List[str]] = ["FieldType", "FieldName", "image", "RFID_OriginDG", "RFID_OriginDGTag", "RFID_OriginTagEntry", "RFID_OriginEntryView"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GraphicFieldRfid from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GraphicFieldRfid from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FieldType": obj.get("FieldType"),
            "FieldName": obj.get("FieldName"),
            "image": ImageData.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "RFID_OriginDG": obj.get("RFID_OriginDG"),
            "RFID_OriginDGTag": obj.get("RFID_OriginDGTag"),
            "RFID_OriginTagEntry": obj.get("RFID_OriginTagEntry"),
            "RFID_OriginEntryView": obj.get("RFID_OriginEntryView")
        })
        return _obj


