# coding: utf-8

"""
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from regula.documentreader.webclient.gen.configuration import Configuration
# this line was added to enable pycharm type hinting
from regula.documentreader.webclient.gen.models import *


"""
Structure is used to describe the contents of a single LDS application and their analysis within the context of the communication session with electronic document
"""
class RfidApplication(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'RfidApplicationType',
        'status': 'RFIDErrorCodes',
        'application_id': 'str',
        'version': 'str',
        'unicode_version': 'str',
        'data_hash_algorithm': 'str',
        'files': 'list[RfidDataFile]'
    }

    attribute_map = {
        'type': 'Type',
        'status': 'Status',
        'application_id': 'ApplicationID',
        'version': 'Version',
        'unicode_version': 'UnicodeVersion',
        'data_hash_algorithm': 'DataHashAlgorithm',
        'files': 'Files'
    }

    def __init__(self, type=None, status=None, application_id=None, version=None, unicode_version=None, data_hash_algorithm=None, files=None, local_vars_configuration=None):  # noqa: E501
        """RfidApplication - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._status = None
        self._application_id = None
        self._version = None
        self._unicode_version = None
        self._data_hash_algorithm = None
        self._files = None
        self.discriminator = None

        self.type = type
        self.status = status
        self.application_id = application_id
        self.version = version
        self.unicode_version = unicode_version
        self.data_hash_algorithm = data_hash_algorithm
        self.files = files

    @property
    def type(self):
        """Gets the type of this RfidApplication.  # noqa: E501


        :return: The type of this RfidApplication.  # noqa: E501
        :rtype: RfidApplicationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RfidApplication.


        :param type: The type of this RfidApplication.  # noqa: E501
        :type type: RfidApplicationType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this RfidApplication.  # noqa: E501


        :return: The status of this RfidApplication.  # noqa: E501
        :rtype: RFIDErrorCodes
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RfidApplication.


        :param status: The status of this RfidApplication.  # noqa: E501
        :type status: RFIDErrorCodes
        """

        self._status = status

    @property
    def application_id(self):
        """Gets the application_id of this RfidApplication.  # noqa: E501

        Application identifier  # noqa: E501

        :return: The application_id of this RfidApplication.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this RfidApplication.

        Application identifier  # noqa: E501

        :param application_id: The application_id of this RfidApplication.  # noqa: E501
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def version(self):
        """Gets the version of this RfidApplication.  # noqa: E501

        Version of the application  # noqa: E501

        :return: The version of this RfidApplication.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RfidApplication.

        Version of the application  # noqa: E501

        :param version: The version of this RfidApplication.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def unicode_version(self):
        """Gets the unicode_version of this RfidApplication.  # noqa: E501

        Unicode version for application  # noqa: E501

        :return: The unicode_version of this RfidApplication.  # noqa: E501
        :rtype: str
        """
        return self._unicode_version

    @unicode_version.setter
    def unicode_version(self, unicode_version):
        """Sets the unicode_version of this RfidApplication.

        Unicode version for application  # noqa: E501

        :param unicode_version: The unicode_version of this RfidApplication.  # noqa: E501
        :type unicode_version: str
        """

        self._unicode_version = unicode_version

    @property
    def data_hash_algorithm(self):
        """Gets the data_hash_algorithm of this RfidApplication.  # noqa: E501

        Algorithm for calculating hash values for files for the procedure of PA  # noqa: E501

        :return: The data_hash_algorithm of this RfidApplication.  # noqa: E501
        :rtype: str
        """
        return self._data_hash_algorithm

    @data_hash_algorithm.setter
    def data_hash_algorithm(self, data_hash_algorithm):
        """Sets the data_hash_algorithm of this RfidApplication.

        Algorithm for calculating hash values for files for the procedure of PA  # noqa: E501

        :param data_hash_algorithm: The data_hash_algorithm of this RfidApplication.  # noqa: E501
        :type data_hash_algorithm: str
        """

        self._data_hash_algorithm = data_hash_algorithm

    @property
    def files(self):
        """Gets the files of this RfidApplication.  # noqa: E501

        List of containers to store information about the read files of the application  # noqa: E501

        :return: The files of this RfidApplication.  # noqa: E501
        :rtype: list[RfidDataFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this RfidApplication.

        List of containers to store information about the read files of the application  # noqa: E501

        :param files: The files of this RfidApplication.  # noqa: E501
        :type files: list[RfidDataFile]
        """

        self._files = files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RfidApplication):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RfidApplication):
            return True

        return self.to_dict() != other.to_dict()
